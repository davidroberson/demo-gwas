cwlVersion: v1.2
class: Workflow
label: NULL Model SVA
$namespaces:
  sbg: https://sevenbridges.com

requirements:
- class: SubworkflowFeatureRequirement
- class: InlineJavascriptRequirement
- class: StepInputExpressionRequirement

inputs:
- id: input_gds_files
  label: GDS files
  doc: |-
    GDS files with genotype data for variants to be tested for association. If multiple files are selected, they will be run in parallel. Files separated by chromosome are expected to have ‘chr##’ strings indicating chromosome number, where ‘##’ can be (1-24, X, Y). Output files for each chromosome will include the corresponding chromosome number.
  type: File[]
  sbg:fileTypes: GDS
  sbg:x: 445.3125
  sbg:y: 111.921875
- id: phenotype_file
  label: Phenotype file
  doc: |-
    RData file with an AnnotatedDataFrame of phenotypes and covariates. Sample identifiers must be in column named “sample.id”.
  type: File
  sbg:fileTypes: RDATA
  sbg:x: -15
  sbg:y: -89.5390625

outputs:
- id: html_reports
  label: HTML Reports
  doc: HTML Reports generated by the tool.
  type: File[]?
  outputSource:
  - null_model/html_reports
  sbg:fileTypes: html
  sbg:x: 317.2303161621094
  sbg:y: 245.921875
- id: assoc_plots
  label: Association test plots
  doc: QQ and Manhattan Plots of p-values in association test results.
  type: File[]?
  outputSource:
  - single_variant_association_testing/assoc_plots
  sbg:fileTypes: PNG
  sbg:x: 797.121826171875
  sbg:y: -208
- id: assoc_combined
  label: Association test results
  doc: |-
    RData file with data.frame of association test results (test statistic, p-value, etc.) See the documentation of the GENESIS R package for detailed description of output.
  type: File[]?
  outputSource:
  - single_variant_association_testing/assoc_combined
  sbg:fileTypes: RDATA
  sbg:x: 807.121826171875
  sbg:y: 13.921875

steps:
- id: null_model
  label: Null Model
  in:
  - id: phenotype_file
    source: phenotype_file
  run:
    cwlVersion: v1.1
    class: Workflow
    label: Null Model
    doc: |-
      **Null Model** workflow fits the regression or mixed effects model under the null hypothesis of no genotype effects. i.e., The outcome variable is regressed on the specified fixed effect covariates and random effects. The output of this null model is then used in the association tests.

      Quantitative and binary outcomes are both supported. Set parameter **family** to gaussian, binomial or poisson depending on the outcome type. Fixed effect covariates from the **Phenotype file** are specified using the **Covariates** parameter, and ancestry principal components can be included as fixed effects using the **PCA Files** and **Number of PCs to include as covariates** parameters. A kinship matrix (KM) or genetic relationship matrix (GRM) can be provided using the **Relatedness matrix file** parameter to account for genetic similarity among samples as a random effect. 

      When no **Relatedness matrix file** is provided, standard linear regression is used if the parameter **family** is set to gaussian, logistic regression is used if the parameter **family** is set to binomial and poisson regression is used in case when **family** is set to poisson. When **Relatedness matrix file** is provided, a linear mixed model (LMM) is fit if **family** is set to gaussian, or a generalized linear mixed model (GLMM) is fit using the [GMMAT method](https://doi.org/10.1016/j.ajhg.2016.02.012) if **family** is set to binomial or poisson. For either the LMM or GLMM, the [AI-REML algorithm](https://doi.org/10.1111/jbg.12398) is used to estimate the variance components and fixed effects parameters.
       
      When samples come from multiple groups (e.g., study or ancestry group), it is common to observe different variances by group for quantitative traits. It is recommended to allow the null model to fit heterogeneous residual variances by group using the parameter group_var. This often provides better control of false positives in subsequent association testing. Note that this only applies when **family** is set to gaussian.

      Rank-based inverse Normal transformation is supported for quantitative outcomes via the inverse_normal parameter. This parameter is TRUE by default. When **inverse normal** parameter is set to TRUE, (1) the null model is fit using the original outcome values, (2) the marginal residuals are rank-based inverse Normal transformed, and (3) the null model is fit again using the transformed residuals as the outcome; fixed effects and random effects are included both times the null model is fit. It has been shown that this fully adjusted two-stage procedure provides better false positive control and power in association tests than simply inverse Normalizing the outcome variable prior to analysis [(**reference**)](https://doi.org/10.1002/gepi.22188).

      This workflow utilizes the *fitNullModel* function from the [GENESIS](doi.org/10.1093/bioinformatics/btz567) software.

      Workflow consists of two steps. First step fits the null model, and the second one generates reports based on data. Reports are available both in RMD and HTML format. If **inverse normal** is TRUE, reports are generated for the model both before and after the transformation.
      Reports contain the following information: Config info, phenotype distributions, covariate effect size estimates, marginal residuals, adjusted phenotype values and session information.

      ### Common use cases:
      This workflow is the first step in association testing. This workflow fits the null model and produces several files which are used in the association testing workflows:
      * Null model file which contains adjusted outcome values, the model matrix, the estimated covariance structure, and other parameters required for downstream association testing. This file will be input in association testing workflows.
      * Phenotype file which is a subset of the provided phenotype file, containing only the outcome and covariates used in fitting null model.
      * *Reportonly* null model file which is used to generate the report for the association test


      This workflow can be used for trait heritability estimation.

      Individual genetic variants or groups of genetic variants can be directly tested for association with this workflow by including them as fixed effect covariates in the model (via the **Conditional Variant File** parameter). This would be extremely inefficient genome-wide, but is useful for follow-up analyses testing variants of interest.


      ### Common issues and important notes:
      * If **PCA File** is not provided, the **Number of PCs to include as covariates** parameter **must** be set to 0.

      * **PCA File** must be an RData object output from the *pcair* function in the GENESIS package.

      * The null model job can be very computationally demanding in large samples (e.g. > 20K). GENESIS supports using sparse representations of matrices in the **Relatedness matrix file** via the R Matrix package, and this can substantially reduce memory usage and CPU time.

      ### Performance Benchmarking

      In the following table you can find estimates of running time and cost on spot instances. 
            

      | Sample Count | Relatedness matrix   | Duration   | Cost - spot ($)  |  Instance (AWS)  |
      |--------------------|----------------------------|-------------|---------------------|------------------------|
      | 2.5k samples  |                 | 4 min                 | $0.01   |   1x c4.xlarge |
      | 2.5k samples  | sparse     | 5 min                 | $0.01   |   1x c4.xlarge |
      | 2.5k samples  | dense      | 5 min                 | $0.01   |   1x c4.xlarge |
      | 10k samples   |                 | 6 min                 | $0.06   |   1x r4.8xlarge |
      | 10k samples   | sparse     | 7 min                 | $0.07   |   1x r4.8xlarge |
      | 10k samples   | dense      | 16 min               | $0.13    |   1x r4.8xlarge |
      | 36k samples  |                 | 7 min                 | $0.06    |   1x r4.8xlarge |
      | 36k samples  | sparse     | 24 min               | $0.27    |   1x r4.8xlarge |
      | 36k samples  | dense      | 52 min               | $0.56    |   1x r4.8xlarge |
      | 54k samples  |                 | 7 min                 | $0.07     |   1x r4.8xlarge |
      | 54k samples  | sparse     | 32 min               | $0.36    |   1x r4.8xlarge |
      | 54k samples  | dense      | 2 h                     | $1.5       | 1x r4.8xlarge |


      *Cost shown here were obtained with **spot instances** enabled. Visit the [Knowledge Center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*
    $namespaces:
      sbg: https://sevenbridges.com

    requirements:
    - class: InlineJavascriptRequirement
    - class: StepInputExpressionRequirement

    inputs:
    - id: sample_include_file
      label: Sample include file
      doc: |-
        RData file with a vector of sample.id to include. If not provided, all samples in the Phenotype file will be included in the analysis.
      type: File?
      sbg:fileTypes: RDATA
      sbg:x: -608.4528198242188
      sbg:y: -792.2285766601562
    - id: relatedness_matrix_file
      label: Relatedness matrix file
      doc: |-
        RData or GDS file with a kinship matrix or genetic relatedness matrix (GRM). For RData files, R object type may be “matrix” or “Matrix”. For very large sample sizes, a block diagonal sparse Matrix object from the “Matrix” package is recommended.
      type: File?
      sbg:fileTypes: GDS, RDATA
      sbg:x: -611
      sbg:y: -661
    - id: phenotype_file
      label: Phenotype file
      doc: |-
        RData file with an AnnotatedDataFrame of phenotypes and covariates. Sample identifiers must be in column named “sample.id”.
      type: File
      sbg:fileTypes: RDATA
      sbg:x: -779.132080078125
      sbg:y: -731.9622802734375
    - id: pca_file
      label: PCA File
      doc: |-
        RData file containing principal components for ancestry adjustment. R object type may be “pcair”, data.frame, or matrix. Row names must contain sample identifiers.
      type: File?
      sbg:fileTypes: RDATA
      sbg:x: -877.1132202148438
      sbg:y: -620.0188598632812
    - id: output_prefix
      label: Output prefix
      doc: Base for all output file names. By default it is null_model.
      type: string?
      sbg:x: -693.75
      sbg:y: -475.75
    - id: gds_files
      label: GDS Files
      doc: |-
        List of gds files with genotype data for variants to be included as covariates for conditional analysis. Only required if Conditional Variant file is specified.
      type: File[]?
      sbg:fileTypes: GDS
      sbg:x: -726.8867797851562
      sbg:y: -351.88677978515625
    - id: inverse_normal
      label: Two stage model
      doc: |-
        TRUE if a two-stage model should be implemented. Stage 1: a null model is fit using the original outcome variable. Stage 2: a second null model is fit using the inverse-normal transformed residuals from Stage 1 as the outcome variable. When FALSE, only the Stage 1 model is fit.  Only applies when Family is “gaussian”.
      type:
      - 'null'
      - name: inverse_normal
        type: enum
        symbols:
        - 'TRUE'
        - 'FALSE'
      sbg:toolDefaultValue: 'TRUE'
      sbg:x: -565.0943603515625
      sbg:y: -251.3773651123047
    - id: conditional_variant_file
      label: Conditional variant file
      doc: |-
        RData file with a data.frame of identifiers for variants to be included as covariates for conditional analysis. Columns should include “chromosome” and “variant.id” that match the variant.id in the GDS files. The alternate allele dosage of these variants will be included as covariates in the analysis.
      type: File?
      sbg:fileTypes: RDATA
      sbg:x: -365.25
      sbg:y: -231.75
    - id: rescale_variance
      label: Rescale residuals
      doc: |-
        Applies only if Two stage model is TRUE. Controls whether to rescale the inverse-normal transformed residuals before fitting the Stage 2 null model, restoring the values to their original scale before the transform. “Marginal” rescales by the standard deviation of the marginal residuals from the Stage 1 model. “Varcomp” rescales by an estimate of the standard deviation based on the Stage 1 model variance component estimates; this can only be used if Norm by group is TRUE. “None” does not rescale.
      type:
      - 'null'
      - name: rescale_variance
        type: enum
        symbols:
        - marginal
        - varcomp
        - none
      sbg:toolDefaultValue: Marginal
      sbg:x: -576
      sbg:y: -43.5
    - id: outcome
      label: Outcome
      doc: Name of column in Phenotype file containing outcome variable.
      type: string
      sbg:x: -671.5
      sbg:y: 1
    - id: norm_bygroup
      label: Norm by group
      doc: |-
        Applies only if Two stage model is TRUE and Group variate is provided. If TRUE,the inverse-normal transformation (and rescaling) is done on each group separately. If FALSE, this is done on all samples jointly.
      type:
      - 'null'
      - name: norm_bygroup
        type: enum
        symbols:
        - 'TRUE'
        - 'FALSE'
      sbg:toolDefaultValue: 'FALSE'
      sbg:x: -562.75
      sbg:y: 133
    - id: n_pcs
      label: Number of PCs to include as covariates
      doc: Number of PCs from PCA file to include as covariates.
      type: int?
      sbg:toolDefaultValue: '0'
      sbg:x: -651.81103515625
      sbg:y: 180.75
    - id: group_var
      label: Group variate
      doc: |-
        Name of column in Phenotype file providing groupings for heterogeneous residual error variances in the model. Only applies when Family is “gaussian”.
      type: string?
      sbg:x: -449.409423828125
      sbg:y: 285.0613098144531
    - id: cpu
      label: CPU
      doc: Number of CPUs to use per job.
      type: int?
      sbg:toolDefaultValue: '1'
      sbg:x: -538
      sbg:y: 329.25
    - id: covars
      label: Covariates
      doc: Names of columns in Phenotype file containing covariates.
      type: string[]?
      sbg:x: -619.25
      sbg:y: 377.5
    - id: family
      label: Family
      doc: |-
        The distribution used to fit the model. Select “gaussian” for continuous outcomes, “binomial” for binary or case/control outcomes, or “poisson” for count outcomes.
      type:
        name: family
        type: enum
        symbols:
        - gaussian
        - poisson
        - binomial
      sbg:x: -463.0585021972656
      sbg:y: 69.44185638427734
    - id: n_categories_boxplot
      label: Number of categories in boxplot
      doc: |-
        If a covariate has fewer than the specified value, boxplots will be used instead of scatter plots for that covariate in the null model report.
      type: int?
      sbg:x: 293.9433898925781
      sbg:y: 314.99371337890625

    outputs:
    - id: null_model_phenotypes
      label: Null model Phenotypes file
      doc: |-
        Phenotype file containing all covariates used in the model. This file should be used as the “Phenotype file” input for the GENESIS association testing workflows.
      type: File?
      outputSource:
      - null_model_r/null_model_phenotypes
      sbg:fileTypes: RDATA
      sbg:x: 529.75
      sbg:y: 81
    - id: rmd_files
      label: Rmd files
      doc: R markdown files used to generate the HTML reports.
      type: File[]?
      outputSource:
      - null_model_report/rmd_files
      sbg:fileTypes: Rmd
      sbg:x: 834.340576171875
      sbg:y: -492.55523681640625
    - id: html_reports
      label: HTML Reports
      doc: HTML Reports generated by the tool.
      type: File[]?
      outputSource:
      - null_model_report/html_reports
      sbg:fileTypes: html
      sbg:x: 822.75
      sbg:y: 24.75
    - id: null_model_file
      label: Null model file
      type: File[]?
      outputSource:
      - null_model_r/null_model_output
      sbg:x: 501.5128173828125
      sbg:y: 291.2054138183594

    steps:
    - id: null_model_r
      label: Fit Null Model
      in:
      - id: outcome
        source: outcome
      - id: phenotype_file
        source: phenotype_file
      - id: gds_files
        source:
        - gds_files
      - id: pca_file
        source: pca_file
      - id: relatedness_matrix_file
        source: relatedness_matrix_file
      - id: family
        source: family
      - id: conditional_variant_file
        source: conditional_variant_file
      - id: covars
        source:
        - covars
      - id: group_var
        source: group_var
      - id: inverse_normal
        source: inverse_normal
      - id: n_pcs
        source: n_pcs
      - id: rescale_variance
        source: rescale_variance
      - id: sample_include_file
        source: sample_include_file
      - id: cpu
        source: cpu
      - id: output_prefix
        source: output_prefix
      - id: norm_bygroup
        source: norm_bygroup
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: null_model.R
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: ResourceRequirement
          coresMin: |-
            ${
                if(inputs.cpu){
                    return inputs.cpu
                }
                else{
                    return 1
                }
            }
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: null_model.config
            writable: false
            entry: |-
              ${  

                  var arg = [];
                  if(inputs.output_prefix){
                      var filename = inputs.output_prefix + "_null_model";
                      arg.push('out_prefix \"' + filename + '\"');
                      var phenotype_filename = inputs.output_prefix + "_phenotypes.RData";
                      arg.push('out_phenotype_file \"' + phenotype_filename + '\"');
                  }
                  else{
                      arg.push('out_prefix "null_model"');
                      arg.push('out_phenotype_file "phenotypes.RData"');
                  }
                  arg.push('outcome ' + inputs.outcome);
                  arg.push('phenotype_file "' + inputs.phenotype_file.basename + '"');
                  if(inputs.gds_files){
                      
                     function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                     }    
                      
                     var gds = inputs.gds_files[0].path.split('/').pop();    
                     var right = gds.split('chr')[1];
                     var chr = [];
                     
                     if(isNumeric(parseInt(right.charAt(1)))) chr.push(right.substr(0,2))
                     else chr.push(right.substr(0,1))
                     
                      arg.push('gds_file "' + inputs.gds_files[0].basename.split("chr")[0] + "chr "+gds.split("chr"+chr)[1] +'"')
                      
                      
                  }
                  if(inputs.pca_file){
                      arg.push('pca_file "' + inputs.pca_file.basename + '"')
                  }
                  if(inputs.relatedness_matrix_file){
                      arg.push('relatedness_matrix_file "' + inputs.relatedness_matrix_file.basename + '"')
                  }
                  if(inputs.family){
                      arg.push('family ' + inputs.family)
                  }
                  if(inputs.conditional_variant_file){
                      arg.push('conditional_variant_file "' + inputs.conditional_variant_file.basename + '"')
                  }
                  if(inputs.covars){
                      var temp = [];
                      for(var i=0; i<inputs.covars.length; i++){
                          temp.push(inputs.covars[i])
                      }
                      arg.push('covars "' + temp.join(' ') + '"')
                  }
                  if(inputs.group_var){
                      arg.push('group_var "' + inputs.group_var + '"')
                  }
                  if(inputs.inverse_normal){
                      arg.push('inverse_normal ' + inputs.inverse_normal)
                  }
                  if(inputs.n_pcs){
                      if(inputs.n_pcs > 0)
                          arg.push('n_pcs ' + inputs.n_pcs)
                  }
                  if(inputs.rescale_variance){
                      arg.push('rescale_variance "' + inputs.rescale_variance + '"')
                  }
                  if(inputs.resid_covars){
                      arg.push('resid_covars ' + inputs.resid_covars)
                  }
                  if(inputs.sample_include_file){
                      arg.push('sample_include_file "' + inputs.sample_include_file.basename + '"')
                  }
                  if(inputs.norm_bygroup){
                      arg.push('norm_bygroup ' + inputs.norm_bygroup)
                  }
                  return arg.join('\n')
              }
          - writable: true
            entry: "${\n    return inputs.phenotype_file\n}"
          - writable: true
            entry: "${\n    return inputs.gds_files\n}"
          - writable: true
            entry: "${\n    return inputs.pca_file\n}"
          - writable: true
            entry: "${\n    return inputs.relatedness_matrix_file\n}"
          - writable: true
            entry: "${\n    return inputs.conditional_variant_file\n}"
          - writable: true
            entry: "${\n    return inputs.sample_include_file\n}"
        - class: InlineJavascriptRequirement
          expressionLib:
          - |2-

            var setMetadata = function(file, metadata) {
                if (!('metadata' in file))
                    file['metadata'] = metadata;
                else {
                    for (var key in metadata) {
                        file['metadata'][key] = metadata[key];
                    }
                }
                return file
            };

            var inheritMetadata = function(o1, o2) {
                var commonMetadata = {};
                if (!Array.isArray(o2)) {
                    o2 = [o2]
                }
                for (var i = 0; i < o2.length; i++) {
                    var example = o2[i]['metadata'];
                    for (var key in example) {
                        if (i == 0)
                            commonMetadata[key] = example[key];
                        else {
                            if (!(commonMetadata[key] == example[key])) {
                                delete commonMetadata[key]
                            }
                        }
                    }
                }
                if (!Array.isArray(o1)) {
                    o1 = setMetadata(o1, commonMetadata)
                } else {
                    for (var i = 0; i < o1.length; i++) {
                        o1[i] = setMetadata(o1[i], commonMetadata)
                    }
                }
                return o1;
            };

        inputs:
        - id: outcome
          label: Outcome
          doc: Name of column in Phenotype File containing outcome variable.
          type: string
          sbg:category: Configs
        - id: phenotype_file
          label: Phenotype file
          doc: RData file with AnnotatedDataFrame of phenotypes.
          type: File
          sbg:category: Categories
          sbg:fileTypes: RDATA
        - id: gds_files
          label: GDS Files
          doc: List of gds files. Required if conditional_variant_file is specified.
          type: File[]?
          sbg:altPrefix: GDS file.
          sbg:category: Configs
          sbg:fileTypes: GDS
        - id: pca_file
          label: PCA File
          doc: RData file with PCA results created by PC-AiR.
          type: File?
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: relatedness_matrix_file
          label: Relatedness matrix file
          doc: RData or GDS file with a kinship matrix or GRM.
          type: File?
          sbg:category: Categories
          sbg:fileTypes: GDS, RDATA, RData
        - id: family
          label: Family
          doc: |-
            Depending on the output type (quantitative or qualitative) one of possible values should be chosen: Gaussian, Binomial, Poisson.
          type:
            name: family
            type: enum
            symbols:
            - gaussian
            - poisson
            - binomial
          sbg:category: Configs
          sbg:toolDefaultValue: gaussian
        - id: conditional_variant_file
          label: Conditional Variant File
          doc: |-
            RData file with data frame of of conditional variants. Columns should include chromosome and variant.id. The alternate allele dosage of these variants will be included as covariates in the analysis.
          type: File?
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: covars
          label: Covariates
          doc: Names of columns phenotype_file containing covariates.
          type: string[]?
        - id: group_var
          label: Group variate
          doc: |-
            Name of covariate to provide groupings for heterogeneous residual error variances in the mixed model.
          type: string?
          sbg:category: Configs
        - id: inverse_normal
          label: Inverse normal
          doc: |-
            TRUE if an inverse-normal transform should be applied to the outcome variable. If Group variate is provided, the transform is done on each group separately.
          type:
          - 'null'
          - name: inverse_normal
            type: enum
            symbols:
            - 'TRUE'
            - 'FALSE'
          sbg:category: Configs
          sbg:toolDefaultValue: 'TRUE'
        - id: n_pcs
          label: Number of PCs to include as covariates
          doc: Number of PCs to include as covariates.
          type: int?
          sbg:category: Configs
          sbg:toolDefaultValue: '3'
        - id: rescale_variance
          label: Rescale variance
          doc: |-
            Applies only if Inverse normal is TRUE and Group variate is provided. Controls whether to rescale the variance for each group after inverse-normal transform, restoring it to the original variance before the transform. Options are marginal, varcomp, or none.
          type:
          - 'null'
          - name: rescale_variance
            type: enum
            symbols:
            - marginal
            - varcomp
            - none
          sbg:category: Configs
          sbg:toolDefaultValue: marginal
        - id: resid_covars
          label: Residual covariates
          doc: |-
            Applies only if Inverse normal is TRUE. Logical for whether covariates should be included in the second null model using the residuals as the outcome variable.
          type:
          - 'null'
          - name: resid_covars
            type: enum
            symbols:
            - 'TRUE'
            - 'FALSE'
          sbg:category: Configs
          sbg:toolDefaultValue: 'TRUE'
        - id: sample_include_file
          label: Sample include file
          doc: RData file with vector of sample.id to include.
          type: File?
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: cpu
          label: CPU
          doc: 'Number of CPUs for each tool job. Default value: 1.'
          type: int?
          sbg:category: Input Options
          sbg:toolDefaultValue: '1'
        - id: output_prefix
          label: Output prefix
          doc: Base for all output file names. By default it is null_model.
          type: string?
          sbg:category: Configs
          sbg:toolDefaultValue: null_model
        - id: norm_bygroup
          label: Norm by group
          doc: |-
            If TRUE and group_var is provided, the inverse normal transform is done on each group separately.
          type:
          - 'null'
          - name: norm_bygroup
            type: enum
            symbols:
            - 'TRUE'
            - 'FALSE'
          sbg:category: General
          sbg:toolDefaultValue: 'FALSE'

        outputs:
        - id: configs
          label: Config files
          doc: Config files.
          type: File[]?
          outputBinding:
            glob: '*.config*'
        - id: null_model_phenotypes
          label: Null model Phenotypes file
          doc: Phenotypes file
          type: File?
          outputBinding:
            glob: |-
              ${
                  if(inputs.null_model_file)
                  {
                      return inputs.phenotype_file.basename
                  }
                  else
                  {
                      return "*phenotypes.RData"
                  }
              }
            outputEval: $(inheritMetadata(self, inputs.phenotype_file))
          sbg:fileTypes: RData
        - id: null_model_files
          label: Null model file
          doc: Null model file.
          type: File[]?
          outputBinding:
            glob: |-
              ${
                  if(inputs.null_model_file)
                  {
                      return inputs.null_model_file.basename
                  }
                  else
                  {
                      if(inputs.output_prefix)
                      {
                          return inputs.output_prefix + '_null_model*RData'
                      }
                      return "*null_model*RData"
                  }
              }
          sbg:fileTypes: RData
        - id: null_model_params
          label: Parameter file
          doc: Parameter file
          type: File?
          outputBinding:
            glob: '*.params'
          sbg:fileTypes: params
        - id: null_model_output
          type: File[]?
          outputBinding:
            glob: |-
              ${
                  if(inputs.null_model_file)
                  {
                      return inputs.null_model_file.basename
                  }
                  else
                  {
                      if(inputs.output_prefix)
                      {
                          return inputs.output_prefix + '_null_model*RData'
                      }
                      return "*null_model*RData"
                  }
              }
            outputEval: |-
              ${
                  var result = []
                  var len = self.length
                  var i;

                  for(i=0; i<len; i++){
                      if(!self[i].path.split('/')[self[0].path.split('/').length-1].includes('reportonly')){
                          result.push(self[i])
                      }
                  }
                  return result
              }

        baseCommand: []
        arguments:
        - prefix: ''
          position: 1
          valueFrom: |-
            ${
                    return "Rscript /usr/local/analysis_pipeline/R/null_model.R null_model.config"
            }
          shellQuote: false
        - prefix: ''
          position: 0
          valueFrom: |-
            ${
                if (inputs.cpu)
                    return 'export NSLOTS=' + inputs.cpu + ' &&'
                else
                    return ''
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:AWSInstanceType
          value: r4.8xlarge;ebs-gp2;500
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-2e1ffaa6/h-23c7dac1/h-31aca52f/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a29ebdb2dd77dd3a1b21a60950dc736723d2cd50f33c9702ef7ea9b21de79e471
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577361146
        sbg:id: h-2e1ffaa6/h-23c7dac1/h-31aca52f/0
        sbg:image_url:
        sbg:latestRevision: 9
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1616077473
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 9
        sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577361146
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577361172
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1579790667
          sbg:revision: 2
          sbg:revisionNotes: Binary is now required
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584373307
          sbg:revision: 3
          sbg:revisionNotes: GDS filename corrected
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594133109
          sbg:revision: 4
          sbg:revisionNotes: Docker image updated to 2.8.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155608
          sbg:revision: 5
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602573604
          sbg:revision: 6
          sbg:revisionNotes: Reportonly excluded
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603284245
          sbg:revision: 7
          sbg:revisionNotes: Family correct
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608904208
          sbg:revision: 8
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077473
          sbg:revision: 9
          sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: configs
      - id: null_model_phenotypes
      - id: null_model_files
      - id: null_model_params
      - id: null_model_output
      sbg:x: 112.75
      sbg:y: 112.25
    - id: null_model_report
      label: Null Model Report
      in:
      - id: family
        source: family
      - id: inverse_normal
        source: inverse_normal
      - id: null_model_params
        source: null_model_r/null_model_params
      - id: phenotype_file
        source: phenotype_file
      - id: sample_include_file
        source: sample_include_file
      - id: pca_file
        source: pca_file
      - id: relatedness_matrix_file
        source: relatedness_matrix_file
      - id: null_model_files
        source:
        - null_model_r/null_model_files
      - id: output_prefix
        source: output_prefix
      - id: conditional_variant_file
        source: conditional_variant_file
      - id: gds_files
        source:
        - gds_files
      - id: n_categories_boxplot
        source: n_categories_boxplot
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: null_model_report
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: null_model_report.config
            writable: false
            entry: |-
              ${
                  var config = "";
                  if(inputs.family)
                  {
                      config += "family " + inputs.family + "\n";
                  }
                  
                  if(inputs.inverse_normal)
                  {
                      config += "inverse_normal " + inputs.inverse_normal + "\n";
                  }

                  if(inputs.output_prefix)
                  {
                      config += "out_prefix \"" + inputs.output_prefix + "\"\n";
                  }
                  else
                  {
                      config += "out_prefix \"null_model\"" + "\n";
                  }
                  
                  if(inputs.n_categories_boxplot){
                      
                      config += "n_categories_boxplot " + inputs.n_categories_boxplot + "\n";
                  }
                  return config
              }
          - writable: true
            entry: "${\n    return inputs.null_model_params\n}"
          - writable: true
            entry: "${\n    return inputs.phenotype_file\n}"
          - writable: true
            entry: "${\n    return inputs.sample_include_file\n}"
          - writable: true
            entry: "${\n    return inputs.pca_file\n}"
          - writable: true
            entry: "${\n    return inputs.relatedness_matrix_file\n}"
          - writable: true
            entry: "${\n    return inputs.null_model_files\n}"
          - writable: true
            entry: "${\n    return inputs.conditional_variant_file\n}"
          - writable: true
            entry: "${\n    return inputs.gds_files\n}"
        - class: InlineJavascriptRequirement

        inputs:
        - id: family
          label: Family
          doc: 'Possible values: Gaussian, Binomial, Poisson'
          type:
            name: family
            type: enum
            symbols:
            - gaussian
            - binomial
            - poisson
          sbg:category: General
        - id: inverse_normal
          label: Inverse normal
          doc: |-
            TRUE if an inverse-normal transform should be applied to the outcome variable. If Group variate is provided, the transform is done on each group separately. Default value is TRUE.
          type:
          - 'null'
          - name: inverse_normal
            type: enum
            symbols:
            - 'TRUE'
            - 'FALSE'
          sbg:category: General
          sbg:toolDefaultValue: 'TRUE'
        - id: null_model_params
          label: Null Model Params
          doc: .params file generated by null model.
          type: File
          sbg:category: Inputs
          sbg:fileTypes: params
        - id: phenotype_file
          label: Phenotype file
          doc: RData file with AnnotatedDataFrame of phenotypes.
          type: File?
          sbg:category: Null model
          sbg:fileTypes: RData
        - id: sample_include_file
          label: Sample include file
          doc: RData file with vector of sample.id to include.
          type: File?
          sbg:category: Null model
          sbg:fileTypes: RData
        - id: pca_file
          label: PCA File
          doc: RData file with PCA results created by PC-AiR.
          type: File?
          sbg:category: Null model
          sbg:fileTypes: RData
        - id: relatedness_matrix_file
          label: Relatedness Matrix File
          doc: RData or GDS file with a kinship matrix or GRM.
          type: File?
          sbg:category: Null model
          sbg:fileTypes: GDS, RData, gds, RDATA
        - id: null_model_files
          label: Null model files
          doc: Null model files.
          type: File[]?
        - id: output_prefix
          label: Output prefix
          doc: Output prefix.
          type: string?
        - id: conditional_variant_file
          label: Conditional variant file
          doc: Conditional variant file
          type: File?
          sbg:category: General
          sbg:fileTypes: RData, RDATA
        - id: gds_files
          label: GDS Files
          doc: GDS files
          type: File[]?
          sbg:category: General
          sbg:fileTypes: GDS
        - id: n_categories_boxplot
          label: Number of categories in boxplot
          doc: Number of categories in boxplot
          type: int?
          default: 10
          sbg:toolDefaultValue: '10'

        outputs:
        - id: html_reports
          label: HTML Reports
          doc: HTML Reports generated by the tool.
          type: File[]?
          outputBinding:
            glob: '*.html'
          sbg:fileTypes: html
        - id: rmd_files
          label: Rmd files
          doc: R markdown files used to generate the HTML reports.
          type: File[]?
          outputBinding:
            glob: '*.Rmd'
          sbg:fileTypes: Rmd
        - id: null_model_report_config
          label: Null model report config
          doc: Null model report config
          type: File?
          outputBinding:
            glob: '*config'

        baseCommand: []
        arguments:
        - prefix: ''
          position: 2
          valueFrom: |-
            ${
                return " Rscript /usr/local/analysis_pipeline/R/null_model_report.R null_model_report.config"
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-54f5ef5f/h-1d7c63f3/h-4f4d6889/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a50b396a1895f88f2ab57b95903db3710b39e88c9789447c03220746cff82936f
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577361077
        sbg:id: h-54f5ef5f/h-1d7c63f3/h-4f4d6889/0
        sbg:image_url:
        sbg:latestRevision: 7
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1616077454
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 7
        sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577361077
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577361102
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1579779117
          sbg:revision: 2
          sbg:revisionNotes: Add version as parameter
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594132991
          sbg:revision: 3
          sbg:revisionNotes: Docker image update to 2.8.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155723
          sbg:revision: 4
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603797749
          sbg:revision: 5
          sbg:revisionNotes: BDC import
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608904240
          sbg:revision: 6
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077454
          sbg:revision: 7
          sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: html_reports
      - id: rmd_files
      - id: null_model_report_config
      sbg:x: 537
      sbg:y: -212.5
    id: dave/build-demo-gwas-workflows/null-model/0
    sbg:appVersion:
    - v1.1
    sbg:categories:
    - GWAS
    - CWL1.0
    - Genomics
    sbg:content_hash: a081c8ee3c4336ff6498bbf5de5af17527809806ed75c8e937c93cc31fa774b0d
    sbg:contributors:
    - dave
    sbg:copyOf: admin/sbg-public-data/null-model/20
    sbg:createdBy: dave
    sbg:createdOn: 1621269275
    sbg:expand_workflow: false
    sbg:id: dave/build-demo-gwas-workflows/null-model/0
    sbg:image_url: |-
      https://platform.sb.biodatacatalyst.nhlbi.nih.gov/ns/brood/images/dave/build-demo-gwas-workflows/null-model/0.png
    sbg:latestRevision: 0
    sbg:license: MIT
    sbg:links:
    - id: https://github.com/UW-GAC/analysis_pipeline
      label: Source Code, Download
    - id: doi.org/10.1093/bioinformatics/btz567
      label: Publication
    - id: |-
        https://www.bioconductor.org/packages/release/bioc/vignettes/GENESIS/inst/doc/assoc_test.html
      label: Home Page
    - id: https://bioconductor.org/packages/devel/bioc/manuals/GENESIS/man/GENESIS.pdf
      label: Documentation
    sbg:modifiedBy: dave
    sbg:modifiedOn: 1621269275
    sbg:project: dave/build-demo-gwas-workflows
    sbg:projectName: 'BUILD: Demo GWAS Workflows'
    sbg:publisher: sbg
    sbg:revision: 0
    sbg:revisionNotes: Copy of admin/sbg-public-data/null-model/20
    sbg:revisionsInfo:
    - sbg:modifiedBy: dave
      sbg:modifiedOn: 1621269275
      sbg:revision: 0
      sbg:revisionNotes: Copy of admin/sbg-public-data/null-model/20
    sbg:sbgMaintained: false
    sbg:toolAuthor: TOPMed DCC
    sbg:validationErrors: []
  out:
  - id: null_model_phenotypes
  - id: rmd_files
  - id: html_reports
  - id: null_model_file
  sbg:x: 157.3125
  sbg:y: 0
- id: single_variant_association_testing
  label: GENESIS Single Variant Association Testing
  in:
  - id: phenotype_file
    source: null_model/null_model_phenotypes
  - id: null_model_file
    source: null_model/null_model_file
  - id: input_gds_files
    source:
    - input_gds_files
  run:
    cwlVersion: v1.1
    class: Workflow
    label: GENESIS Single Variant Association Testing
    doc: |-
      **Single Variant workflow** runs single-variant association tests. It consists of several steps. Define Segments divides genome into segments, either by a number of segments, or by a segment length. Note that number of segments refers to whole genome, not a number of segments per chromosome. Association test is then performed for each segment in parallel, before combining results on chromosome level. Final step produces QQ and Manhattan plots.

      This workflow uses the output from a model fit using the null model workflow to perform score tests for all variants individually. The reported effect estimate is for the alternate allele, and multiple alternate alleles for a single variant are tested separately.

      When testing a binary outcome, the saddlepoint approximation (SPA) for p-values [1][2] can be used by specifying **Test type** = ‘score.spa’; this is generally recommended. SPA will provide better calibrated p-values, particularly for rarer variants in samples with case-control imbalance. 

      When testing a binary outcome, the BinomiRare test is also available[3]. This is a “carriers only” exact test that compares the observed number of variant carriers who are cases to the expected number based on the probability of being a case under the null hypothesis of no association between outcome and variant. This test may be useful when testing association of very rare variants with rare outcomes.

      If your genotype data has sporadic missing values, they are mean imputed using the allele frequency observed in the sample.

      On the X chromosome, males have genotype values coded as 0/2 (females as 0/1/2).

      This workflow utilizes the *assocTestSingle* function from the GENESIS software [4].

      ### Common Use Cases

      Single Variant Association Testing workflow is designed to run single-variant association tests using GENESIS software. Set of variants on which to run association testing can be reduced by providing **Variant Include Files** - One file per chromosome containing variant IDs for variants on which association testing will be performed.


      ### Common issues and important notes
      * Association Testing - Single job can be very memory demanding, depending on number of samples and null model used. We suggest running with at least 5GB of memory allocated for small studies, and to use approximation of 0.5GB per thousand samples for larger studies (with more than 10k samples), but this again depends on complexity of null model. If a run fails with *error 137*, and with message killed, most likely cause is lack of memory. Memory can be allocated using the **memory GB** parameter.

      * This workflow expects **GDS** files split by chromosome, and will not work otherwise. If provided, **variant include** files must also be split in the same way. Also GDS and Variant include files should be properly named. It is expected that chromosome is included in the filename in following format: chr## , where ## is the name of the chromosome (1-24 or X, Y). Chromosome can be included at any part of the filename. Examples for GDS: data_subset_chr1.gds, data_chr1_subset.gds. Examples for Variant include files: variant_include_chr1.RData, chr1_variant_include.RData.

      * Some input arguments are mutually exclusive, for more information, please visit workflow [github page](https://github.com/UW-GAC/analysis_pipeline/tree/v2.5.0)

      ### Changes introduced by Seven Bridges
      There are no changes introduced by Seven Bridges.

      ### Performance Benchmarking

      In the following table you can find estimates of running time and cost. 
              

      | Samples &nbsp; &nbsp; |    | Rel. Matrix &nbsp; &nbsp;|Parallel instances &nbsp; &nbsp; | Instance type  &nbsp; &nbsp; &nbsp; &nbsp;| Spot/On Dem. &nbsp; &nbsp; |CPU &nbsp; &nbsp; | RAM &nbsp; &nbsp; | Time  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| Cost |
      |--------------------|---------------|----------------|------------------------|--------------------|--------------------|--------|--------|---------|-------|
      | 2.5k   |                 |   w/o          | 8                           |  r4.8xlarge | Spot     |1  | 2   | 1 h, 8 min   | $5  |
      | 2.5k   |               |   Dense     | 8                           |  r4.8xlarge | Spot     |1  | 2   | 1 h, 8 min   | $5  |
      | 10k   |                 |   w/o           | 8                           |  c5.18xlarge | On Demand     |1  | 2   | 50 min   | $10  |
      | 10k   |                |   Sparse     | 8                           |  c5.18xlarge | On Demand     |1  | 2   | 58 min   | $11  |
      | 10k   |                |   Sparse     | 8                           |  r4.8xlarge | On Demand     |1  | 2   | 1 h, 30 min   | $11  |
      | 10k   |                 |   Dense      | 8                           |  r5.4xlarge | On Demand     |1  | 8   | 3 h   | $24  |
      | 36k  |                  |   w/o           | 8                           |  r5.4xlarge | On Demand     |1  | 5   | 3 h, 20 min   | $27  |
      | 36k  |                  |   Sparse     | 8                           |  r5.4xlarge | On Demand     |1  | 5   | 4 h   | $32  |
      | 36k   |                  |   Sparse     | 8                           |  r5.12xlarge | On Demand     |1  | 5   | 1 h, 20 min   | $32  |
      | 36k   |                  |   Dense      | 8                           |  r5.12xlarge | On Demand     |1  | 50   | 1 d, 15 h   | $930  |
      | 36k   |                 |   Dense      | 8                           |  r5.24xlarge | On Demand     |1  | 50   | 17 h   | $800  |
      | 50k   |                  |   w/o           | 8                           |  r5.12xlarge | On Demand     |1  | 8   | 2 h   | $44  |
      | 50k   |                  |   Sparse     | 8                           |  r5.12xlarge | On Demand     |1  | 8   | 2 h   | $48 |
      | 50k   |                  |   Dense      | 8                           |  r5.24xlarge | On Demand     |48  | 100   | 11 d   | $13500  |
      | 2.5k   |                  |   w/o          | 8                           |  n1-standard-64 | Preemptible    |1  | 2   | 1 h   | $7  |
      | 2.5k   |                  |   Dense     | 8                           |  n1-standard-64 | Preemptible    |1  | 2   | 1 h   | $7  |
      | 10k   |                  |   w/o           | 8                           |  n1-standard-4 | On Demand     |1  | 2   | 1 h, 12 min  | $13  |
      | 10k   |                  |   Sparse     | 8                           |  n1-standard-4 | On Demand     |1  | 2   | 1 h, 13  min   | $14 |
      | 10k  |                  |   Dense      | 8                           |  n1-highmem-32 | On Demand     |1  | 8   | 2 h, 20  min   | $30  |
      | 36k   |                  |   w/o           | 8                           |  n1-standard-64 | On Demand     |1  | 5   | 1 h, 30  min   | $35  |
      | 36k   |                 |   Sparse     | 8                           |  n1-highmem-16 | On Demand     |1  | 5   | 4 h, 30  min   | $35  |
      | 36k   |                  |   Sparse     | 8                           |  n1-standard-64 | On Demand     |1  | 5   | 1 h, 30  min   | $35  |
      | 36k   |                  |   Dense      | 8                           |  n1-highmem-96 | On Demand     |1  | 50   | 1 d, 6  h   | $1300  |
      | 50k   |                  |   w/o           | 8                           |  n1-standard-96 | On Demand     |1  | 8    | 2  h   | $73  |
      | 50k   |                  |   Sparse     | 8                           |  n1-standard-96 | On Demand     |1  | 8    | 2  h   | $73  |
      | 50k   |                  |   Dense      | 8                           |  n1-highmem-96 | On Demand     |16  | 100    | 6  d   | $6600  |

      In tests performed we used 1000G (tasks with 2.5k participants) and TOPMed freeze5 datasets (tasks with 10k or more participants). 
      All these tests are done with applied **MAF >= 1%** filter. The number of variants that have been tested is **14 mio in 1000G** and **12 mio in TOPMed freeze 5** dataset. 

      Also, a common filter in these analysis is **MAC>=5**. In that case the number of variants would be **32 mio for 1000G** and **92 mio for TOPMed freeze5** data. Since for single variant testing, the compute time grows linearly with the number of variants tested the execution time and price can be easily estimated from the results above.

      *For more details on **spot/preemptible instances** please visit the [Knowledge Center](https://docs.sevenbridges.com/docs/about-spot-instances).*   


      ### API Python Implementation

      The app's draft task can also be submitted via the **API**. In order to learn how to get your **Authentication token** and **API endpoint** for the corresponding Platform visit our [documentation](https://github.com/sbg/sevenbridges-python#authentication-and-configuration).

      ```python
      from sevenbridges import Api

      authentication_token, api_endpoint = "enter_your_token", "enter_api_endpoint"
      api = Api(token=authentication_token, url=api_endpoint)
      # Get project_id/app_id from your address bar. Example: https://f4c.sbgenomics.com/u/your_username/project/app
      project_id, app_id = "your_username/project", "your_username/project/app"
      # Get file names from files in your project. Example: Names are taken from Data/Public Reference Files.
      inputs = {
          "input_gds_files": api.files.query(project=project_id, names=["basename_chr1.gds", "basename_chr2.gds", ..]),
          "phenotype_file": api.files.query(project=project_id, names=["name_of_phenotype_file"])[0],
          "null_model_file": api.files.query(project=project_id, names=["name_of_null_model_file"])[0]
      }
      task = api.tasks.create(name='Single Variant Association Testing - API Run', project=project_id, app=app_id, inputs=inputs, run=False)
      ```
      Instructions for installing and configuring the API Python client, are provided on [github](https://github.com/sbg/sevenbridges-python#installation). For more information about using the API Python client, consult [sevenbridges-python documentation](http://sevenbridges-python.readthedocs.io/en/latest/). **More examples** are available [here](https://github.com/sbg/okAPI).

      Additionally, [API R](https://github.com/sbg/sevenbridges-r) and [API Java](https://github.com/sbg/sevenbridges-java) clients are available. To learn more about using these API clients please refer to the [API R client documentation](https://sbg.github.io/sevenbridges-r/), and [API Java client documentation](https://docs.sevenbridges.com/docs/java-library-quickstart).


      ### References
      [1] [SaddlePoint Approximation (SPA)](https://doi.org/10.1016/j.ajhg.2017.05.014)  
      [2] [SPA - additional reference](https://doi.org/10.1038/s41588-018-0184-y)  
      [3] [BinomiRare](https://pubmed.ncbi.nlm.nih.gov/28393384/)  
      [4] [GENESIS toolkit](doi.org/10.1093/bioinformatics/btz567)
    $namespaces:
      sbg: https://sevenbridges.com

    requirements:
    - class: ScatterFeatureRequirement
    - class: InlineJavascriptRequirement
    - class: StepInputExpressionRequirement

    inputs:
    - id: segment_length
      label: Segment length
      doc: Segment length in kb, used for parallelization.
      type: int?
      sbg:toolDefaultValue: 10000kb
      sbg:x: -361
      sbg:y: -204
    - id: n_segments
      label: Number of segments
      doc: |-
        Number of segments, used for parallelization (overrides Segment length). Note that this parameter defines the number of segments for the entire genome, so using this argument with selected chromosomes may result in fewer segments than you expect (and the minimum is one segment per chromosome).
      type: int?
      sbg:x: -484
      sbg:y: -88
    - id: genome_build
      label: Genome build
      doc: |-
        Genome build for the genotypes in the GDS file (hg19 or hg38). Used to divide the genome into segments for parallel processing.
      type:
      - 'null'
      - name: genome_build
        type: enum
        symbols:
        - hg19
        - hg38
      sbg:toolDefaultValue: hg38
      sbg:x: -363
      sbg:y: 6
    - id: variant_block_size
      label: Variant block size
      doc: |-
        Number of variants to read from the GDS file in a single block. For smaller sample sizes, increasing this value will reduce the number of iterations in the code. For larger sample sizes, values that are too large will result in excessive memory use.
      type: int?
      sbg:toolDefaultValue: '1024'
      sbg:x: 58.5833740234375
      sbg:y: 42.84904098510742
    - id: test_type
      label: Test type
      doc: |-
        Type of association test to perform. “Score” performs a score test and can be used with any null model. “Score.spa” uses the saddle point approximation (SPA) to provide more accurate p-values, especially for rare variants, in samples with unbalanced case:control ratios; “score.spa” can only be used if the null model family is “binomial”. “BinomiRare” is a carriers only exact test that may perform better when testing very rare variants with rare outcomes; “BinomiRare” can only be used if the null model family is “binomial”.
      type:
      - 'null'
      - name: test_type
        type: enum
        symbols:
        - score
        - score.spa
        - BinomiRare
      sbg:toolDefaultValue: score
      sbg:x: -50
      sbg:y: 93
    - id: phenotype_file
      label: Phenotype file
      doc: |-
        RData file with an AnnotatedDataFrame of phenotypes and covariates. Sample identifiers must be in column named “sample.id”. It is recommended to use the phenotype file output by the GENESIS Null Model app.
      type: File
      sbg:fileTypes: RDATA
      sbg:x: 57
      sbg:y: 150
    - id: pass_only
      label: Pass only
      doc: |-
        TRUE to select only variants with FILTER=PASS. If FALSE, variants that failed the quality filter will be included in the test.
      type:
      - 'null'
      - name: pass_only
        type: enum
        symbols:
        - 'TRUE'
        - 'FALSE'
      sbg:toolDefaultValue: 'TRUE'
      sbg:x: -49
      sbg:y: 202
    - id: null_model_file
      label: Null model file
      doc: |-
        RData file containing a null model object. Run the GENESIS Null Model app to create this file.
      type: File
      sbg:fileTypes: RDATA
      sbg:x: 60
      sbg:y: 268
    - id: memory_gb
      label: memory GB
      doc: Memory in GB per job.
      type: float?
      sbg:toolDefaultValue: '8'
      sbg:x: -44
      sbg:y: 319
    - id: maf_threshold
      label: MAF threshold
      doc: |-
        Minimum minor allele frequency for variants to include in test. Only used if MAC threshold is NA.
      type: float?
      sbg:toolDefaultValue: '0.001'
      sbg:x: 59
      sbg:y: 383
    - id: mac_threshold
      label: MAC threshold
      doc: |-
        Minimum minor allele count for variants to include in test. Recommend to use a higher threshold when outcome is binary or count data. To disable it set it to NA.
      type: float?
      sbg:toolDefaultValue: '5'
      sbg:x: -42
      sbg:y: 432
    - id: cpu
      label: CPU
      doc: Number of CPUs for each job.
      type: int?
      sbg:toolDefaultValue: '1'
      sbg:x: -46.285701751708984
      sbg:y: 548.0167846679688
    - id: disable_thin
      label: Disable Thin
      doc: |-
        Logical for whether to thin points in the QQ and Manhattan plots. By default, points are thinned in dense regions to reduce plotting time. If this parameter is set to TRUE, all variant p-values will be included in the plots, and the plotting will be very long and memory intensive.
      type: boolean?
      sbg:toolDefaultValue: 'TRUE'
      sbg:x: 952.9915771484375
      sbg:y: 432.899169921875
    - id: known_hits_file
      label: Known hits file
      doc: |-
        RData file with data.frame containing columns chr and pos. If provided, 1 Mb regions surrounding each variant listed will be omitted from the QQ and manhattan plots.
      type: File?
      sbg:fileTypes: RDATA
      sbg:x: 1070
      sbg:y: 407
    - id: thin_nbins
      label: Thin N bins
      doc: Number of bins to use for thinning.
      type: int?
      sbg:toolDefaultValue: '10'
      sbg:x: 1052.4117431640625
      sbg:y: 253.57142639160156
    - id: thin_npoints
      label: Thin N points
      doc: Number of points in each bin after thinning.
      type: int?
      sbg:toolDefaultValue: '10000'
      sbg:x: 934.3193359375
      sbg:y: 234
    - id: out_prefix
      label: Output prefix
      doc: Prefix that will be included in all output files.
      type: string
      sbg:x: 74.62183380126953
      sbg:y: 502.3025207519531
    - id: input_gds_files
      label: GDS files
      doc: |-
        GDS files with genotype data for variants to be tested for association. If multiple files are selected, they will be run in parallel. Files separated by chromosome are expected to have ‘chr##’ strings indicating chromosome number, where ‘##’ can be (1-24, X, Y). Output files for each chromosome will include the corresponding chromosome number.
      type: File[]
      sbg:fileTypes: GDS
      sbg:x: -358.317626953125
      sbg:y: -345.1597595214844
    - id: truncate_pval_threshold
      label: Truncate pval threshold
      doc: Maximum p-value to display in truncated QQ and manhattan plots.
      type: float?
      sbg:x: 1158.9296875
      sbg:y: 598.3650512695312
    - id: plot_mac_threshold
      label: Plot MAC threshold
      doc: |-
        Minimum minor allele count for variants or aggregate units to include in plots (if different from MAC threshold).
      type: int?
      sbg:x: 1044.307861328125
      sbg:y: 560.8524169921875
    - id: variant_include_files
      label: Variant Include Files
      doc: RData file containing ids of variants to be included.
      type: File[]?
      sbg:fileTypes: RData
      sbg:x: 13.8739652633667
      sbg:y: -437.260498046875

    outputs:
    - id: assoc_combined
      label: Association test results
      doc: |-
        RData file with data.frame of association test results (test statistic, p-value, etc.) See the documentation of the GENESIS R package for detailed description of output.
      type: File[]?
      outputSource:
      - assoc_combine_r/assoc_combined
      sbg:fileTypes: RDATA
      sbg:x: 1370.5833740234375
      sbg:y: -3.150960683822632
    - id: assoc_plots
      label: Association test plots
      doc: QQ and Manhattan Plots of p-values in association test results.
      type: File[]?
      outputSource:
      - assoc_plots_r/assoc_plots
      sbg:fileTypes: PNG
      sbg:x: 1577.5833740234375
      sbg:y: 331.8490295410156

    steps:
    - id: define_segments_r
      label: define_segments.R
      in:
      - id: segment_length
        source: segment_length
      - id: n_segments
        source: n_segments
      - id: genome_build
        source: genome_build
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: define_segments.R
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: define_segments.config
            writable: false
            entry: |-
              ${
                  var argument = [];
                  argument.push('out_file "segments.txt"')
                  if(inputs.genome_build){
                       argument.push('genome_build "' + inputs.genome_build + '"')
                  }
                  return argument.join('\n')
              }
        - class: InlineJavascriptRequirement

        inputs:
        - id: segment_length
          label: Segment length
          doc: Segment length in kb, used for paralelization.
          type: int?
          inputBinding:
            prefix: --segment_length
            position: 1
            shellQuote: false
          sbg:altPrefix: -s
          sbg:category: Optional parameters
          sbg:toolDefaultValue: '10000'
        - id: n_segments
          label: Number of segments
          doc: |-
            Number of segments, used for paralelization (overrides Segment length). Note that this parameter defines the number of segments for the entire genome, so using this argument with selected chromosomes may result in fewer segments than you expect (and the minimum is one segment per chromosome).
          type: int?
          inputBinding:
            prefix: --n_segments
            position: 2
            shellQuote: false
          sbg:altPrefix: -n
          sbg:category: Optional parameters
        - id: genome_build
          label: Genome build
          doc: |-
            Genome build for the genotypes in the GDS file (hg19 or hg38). Used to divide the genome into segments for parallel processing.
          type:
          - 'null'
          - name: genome_build
            type: enum
            symbols:
            - hg19
            - hg38
          default: hg38
          sbg:category: Configs
          sbg:toolDefaultValue: hg38

        outputs:
        - id: config
          label: Config file
          doc: Config file.
          type: File?
          outputBinding:
            glob: '*.config'
          sbg:fileTypes: CONFIG
        - id: define_segments_output
          label: Segments file
          doc: Segments txt file.
          type: File?
          outputBinding:
            glob: segments.txt
          sbg:fileTypes: TXT

        baseCommand: []
        arguments:
        - prefix: ''
          position: 100
          valueFrom: define_segments.config
          separate: false
          shellQuote: false
        - prefix: ''
          position: 0
          valueFrom: Rscript /usr/local/analysis_pipeline/R/define_segments.R
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-1146a409/h-b00899d9/h-83b7cac8/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: abcb7884a4e9f96eab06afefcfd6ac9a971605d3a26b810578009f05e0f63455d
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577360777
        sbg:id: h-1146a409/h-b00899d9/h-83b7cac8/0
        sbg:image_url:
        sbg:latestRevision: 6
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1616077263
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 6
        sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360777
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360800
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594132905
          sbg:revision: 2
          sbg:revisionNotes: Docker image update to 2.0.8
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155769
          sbg:revision: 3
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603798568
          sbg:revision: 4
          sbg:revisionNotes: BDC import
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907204
          sbg:revision: 5
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077263
          sbg:revision: 6
          sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: config
      - id: define_segments_output
      sbg:x: -199.3984375
      sbg:y: -88
    - id: assoc_single_r
      label: Association Testing Single
      in:
      - id: gds_file
        valueFrom: '$(self ? [].concat(self)[0] : self)'
        source:
        - sbg_prepare_segments_1/gds_output
        linkMerge: merge_flattened
      - id: null_model_file
        source: null_model_file
      - id: phenotype_file
        source: phenotype_file
      - id: mac_threshold
        source: mac_threshold
      - id: maf_threshold
        source: maf_threshold
      - id: pass_only
        source: pass_only
      - id: segment_file
        valueFrom: '$(self ? [].concat(self)[0] : self)'
        source:
        - define_segments_r/define_segments_output
        linkMerge: merge_flattened
      - id: test_type
        source: test_type
      - id: variant_include_file
        valueFrom: '$(self ? [].concat(self)[0] : self)'
        source:
        - sbg_prepare_segments_1/variant_include_output
        linkMerge: merge_flattened
      - id: segment
        valueFrom: '$(self ? [].concat(self)[0] : self)'
        source:
        - sbg_prepare_segments_1/segments
        linkMerge: merge_flattened
      - id: memory_gb
        default: 80
        source: memory_gb
      - id: cpu
        source: cpu
      - id: variant_block_size
        source: variant_block_size
      - id: out_prefix
        source: out_prefix
      - id: genome_build
        source: genome_build
      scatter:
      - gds_file
      - variant_include_file
      - segment
      scatterMethod: dotproduct
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: assoc_single.R
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: ResourceRequirement
          coresMin: "${ if(inputs.cpu)\n        return inputs.cpu \n    else \n  \
            \      return 1\n}"
          ramMin: |-
            ${
                if(inputs.memory_gb)
                    return parseFloat(inputs.memory_gb * 1024)
                else
                    return 8*1024
            }
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: assoc_single.config
            writable: false
            entry: |-
              ${
                  function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                      
                  var chr = find_chromosome(inputs.gds_file.path)
                  
                  var argument = [];
                  if(!inputs.is_unrel)
                  {   
                      if(inputs.out_prefix){
                          argument.push("out_prefix \"" + inputs.out_prefix + "_chr"+chr + "\"");
                      }
                      if(!inputs.out_prefix){
                      var data_prefix = inputs.gds_file.basename.split('chr');
                      var data_prefix2 = inputs.gds_file.basename.split('.chr');
                      if(data_prefix.length == data_prefix2.length)
                          argument.push('out_prefix "' + data_prefix2[0] + '_single_chr' + chr + inputs.gds_file.basename.split('chr'+chr)[1].split('.gds')[0] +'"');
                      else
                          argument.push('out_prefix "' + data_prefix[0] + 'single_chr' + chr +inputs.gds_file.basename.split('chr'+chr)[1].split('.gds')[0]+'"');}
                      argument.push('gds_file "' + inputs.gds_file.path +'"');
                      argument.push('null_model_file "' + inputs.null_model_file.path + '"');
                      argument.push('phenotype_file "' + inputs.phenotype_file.path + '"');
                      if(inputs.mac_threshold){
                          argument.push('mac_threshold ' + inputs.mac_threshold);
                      }
                      if(inputs.maf_threshold){
                          argument.push('maf_threshold ' + inputs.maf_threshold);
                      }
                      if(inputs.pass_only){
                          argument.push('pass_only ' + inputs.pass_only);
                      }
                      if(inputs.segment_file){
                          argument.push('segment_file "' + inputs.segment_file.path + '"');
                      }
                      if(inputs.test_type){
                          argument.push('test_type "' + inputs.test_type + '"') ;
                      }
                      if(inputs.variant_include_file){
                          argument.push('variant_include_file "' + inputs.variant_include_file.path + '"');
                      }
                      if(inputs.variant_block_size){
                          argument.push('variant_block_size ' + inputs.variant_block_size);
                      }
                      if(inputs.genome_build){
                          argument.push('genome_build ' + inputs.genome_build);
                      }
                      
                      argument.push('');
                      return argument.join('\n');
                  }
              }
        - class: InlineJavascriptRequirement
          expressionLib:
          - |2-

            var setMetadata = function(file, metadata) {
                if (!('metadata' in file))
                    file['metadata'] = metadata;
                else {
                    for (var key in metadata) {
                        file['metadata'][key] = metadata[key];
                    }
                }
                return file
            };

            var inheritMetadata = function(o1, o2) {
                var commonMetadata = {};
                if (!Array.isArray(o2)) {
                    o2 = [o2]
                }
                for (var i = 0; i < o2.length; i++) {
                    var example = o2[i]['metadata'];
                    for (var key in example) {
                        if (i == 0)
                            commonMetadata[key] = example[key];
                        else {
                            if (!(commonMetadata[key] == example[key])) {
                                delete commonMetadata[key]
                            }
                        }
                    }
                }
                if (!Array.isArray(o1)) {
                    o1 = setMetadata(o1, commonMetadata)
                } else {
                    for (var i = 0; i < o1.length; i++) {
                        o1[i] = setMetadata(o1[i], commonMetadata)
                    }
                }
                return o1;
            };

        inputs:
        - id: gds_file
          label: GDS file
          doc: GDS file.
          type: File
          sbg:category: Configs
          sbg:fileTypes: GDS
        - id: null_model_file
          label: Null model file
          doc: Null model file.
          type: File
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: phenotype_file
          label: Phenotype file
          doc: RData file with AnnotatedDataFrame of phenotypes.
          type: File
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: mac_threshold
          label: MAC threshold
          doc: |-
            Minimum minor allele count for variants to include in test. Use a higher threshold when outcome is binary. To disable it set it to NA. Tool default: 5.
          type: float?
          sbg:category: Configs
          sbg:toolDefaultValue: '5'
        - id: maf_threshold
          label: MAF threshold
          doc: |-
            Minimum minor allele frequency for variants to include in test. Only used if MAC threshold is NA. Tool default: 0.001.
          type: float?
          sbg:category: Configs
          sbg:toolDefaultValue: '0.001'
        - id: pass_only
          label: Pass only
          doc: TRUE to select only variants with FILTER=PASS.
          type:
          - 'null'
          - name: pass_only
            type: enum
            symbols:
            - 'TRUE'
            - 'FALSE'
          sbg:category: Configs
          sbg:toolDefaultValue: 'TRUE'
        - id: segment_file
          label: Segment file
          doc: Segment file.
          type: File?
          sbg:category: Configs
          sbg:fileTypes: TXT
        - id: test_type
          label: Test type
          doc: |-
            Type of test to perform. If samples are related (mixed model), options are score if binary is FALSE, score and score.spa if binary is TRUE. Default value: score.
          type:
          - 'null'
          - name: test_type
            type: enum
            symbols:
            - score
            - score.spa
            - BinomiRare
          sbg:category: Configs
          sbg:toolDefaultValue: score
        - id: variant_include_file
          label: Variant include file
          doc: RData file with vector of variant.id to include.
          type: File?
          sbg:category: Configs
          sbg:fileTypes: RDATA
        - id: chromosome
          label: Chromosome
          doc: Chromosome (1-24 or X,Y).
          type: string?
          inputBinding:
            prefix: --chromosome
            position: 1
            shellQuote: false
          sbg:altPrefix: -c
          sbg:category: Optional inputs
        - id: segment
          label: Segment number
          doc: Segment number.
          type: int?
          inputBinding:
            prefix: --segment
            position: 2
            shellQuote: false
          sbg:category: Optional parameters
        - id: memory_gb
          label: memory GB
          doc: 'Memory in GB per job. Default value: 8.'
          type: float?
          sbg:category: Input options
          sbg:toolDefaultValue: '8'
        - id: cpu
          label: CPU
          doc: 'Number of CPUs for each tool job. Default value: 1.'
          type: int?
          sbg:category: Input options
          sbg:toolDefaultValue: '1'
        - id: variant_block_size
          label: Variant block size
          doc: 'Number of variants to read in a single block. Default: 1024'
          type: int?
          sbg:category: General
          sbg:toolDefaultValue: '1024'
        - id: out_prefix
          label: Output prefix
          doc: Output prefix
          type: string?
          sbg:toolDefaultValue: assoc_single
        - id: genome_build
          label: Genome build
          doc: |-
            Genome build for the genotypes in the GDS file (hg19 or hg38). Used to divide the genome into segments for parallel processing.
          type:
          - 'null'
          - name: genome_build
            type: enum
            symbols:
            - hg19
            - hg38
          default: hg38

        outputs:
        - id: configs
          label: Config files
          doc: Config files.
          type: File[]?
          outputBinding:
            glob: '*config*'
          sbg:fileTypes: CONFIG
        - id: assoc_single
          label: Assoc single output
          doc: Assoc single output.
          type: File?
          outputBinding:
            glob: '*.RData'
            outputEval: $(inheritMetadata(self, inputs.gds_file))
          sbg:fileTypes: RDATA

        baseCommand: []
        arguments:
        - prefix: ''
          position: 100
          valueFrom: |-
            ${
                if(inputs.is_unrel)
                {
                    return "assoc_single_unrel.config"
                }
                else
                {
                    return "assoc_single.config"
                }
                
            }
          separate: false
          shellQuote: false
        - prefix: ''
          position: 1
          valueFrom: |-
            ${
                if(inputs.is_unrel)
                {
                    return "Rscript /usr/local/analysis_pipeline/R/assoc_single_unrel.R"
                }
                else
                {
                    return "Rscript /usr/local/analysis_pipeline/R/assoc_single.R"
                }
                
            }
          shellQuote: false
        - prefix: ''
          position: 0
          valueFrom: |-
            ${
                if (inputs.cpu)
                    return 'export NSLOTS=' + inputs.cpu + ' &&'
                else
                    return ''
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:AWSInstanceType
          value: r4.8xlarge;ebs-gp2;500
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-6f665fd1/h-0a2fb995/h-cea5fc50/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a94935ca3d553186c6d4ba57c35b4ad86ea00b2a2aeda3c3d3186763f473f4aa8
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577360947
        sbg:id: h-6f665fd1/h-0a2fb995/h-cea5fc50/0
        sbg:image_url:
        sbg:latestRevision: 9
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1616077397
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 9
        sbg:revisionNotes: Docker updated to v2.10.0 and BinomiRare test added
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360947
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360972
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584373463
          sbg:revision: 2
          sbg:revisionNotes: GDS filename corrected
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594133227
          sbg:revision: 3
          sbg:revisionNotes: Docker image update to 2.8.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155510
          sbg:revision: 4
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603361997
          sbg:revision: 5
          sbg:revisionNotes: parseFloat instead parseInt
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603362503
          sbg:revision: 6
          sbg:revisionNotes: ParseFloat instead parseInt
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603797707
          sbg:revision: 7
          sbg:revisionNotes: BDC import
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907021
          sbg:revision: 8
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077397
          sbg:revision: 9
          sbg:revisionNotes: Docker updated to v2.10.0 and BinomiRare test added
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: configs
      - id: assoc_single
      sbg:x: 410
      sbg:y: 110
    - id: assoc_combine_r
      label: Association Combine
      in:
      - id: chromosome
        valueFrom: '$(self ? [].concat(self) : self)'
        source:
        - sbg_group_segments_1/chromosome
      - id: assoc_type
        default: single
      - id: assoc_files
        valueFrom: '$(self ? [].concat(self) : self)'
        source:
        - sbg_group_segments_1/grouped_assoc_files
      - id: memory_gb
        default: 8
      - id: cpu
        default: 2
      scatter:
      - chromosome
      - assoc_files
      scatterMethod: dotproduct
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: assoc_combine.R
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: ResourceRequirement
          coresMin: "${ if(inputs.cpu)\n        return inputs.cpu \n    else \n  \
            \      return 1\n}"
          ramMin: |-
            ${
                if(inputs.memory_gb)
                    return parseInt(inputs.memory_gb * 1024)
                else
                    return 4*1024
            }
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: assoc_combine.config
            writable: false
            entry: |-
              ${
                  var argument = [];
                  argument.push('assoc_type "'+ inputs.assoc_type + '"');
                  var data_prefix = inputs.assoc_files[0].basename.split('_chr')[0];
                  if (inputs.out_prefix)
                  {
                      argument.push('out_prefix "' + inputs.out_prefix+ '"');
                  }
                  else
                  {
                      argument.push('out_prefix "' + data_prefix+ '"');
                  }
                  
                  if(inputs.conditional_variant_file){
                      argument.push('conditional_variant_file "' + inputs.conditional_variant_file.path + '"');
                  }
                  //if(inputs.assoc_files)
                  //{
                  //    arguments.push('assoc_files "' + inputs.assoc_files[0].path + '"')
                  //}
                  return argument.join('\n') + '\n'
              }
        - class: InlineJavascriptRequirement
          expressionLib:
          - |2-

            var setMetadata = function(file, metadata) {
                if (!('metadata' in file))
                    file['metadata'] = metadata;
                else {
                    for (var key in metadata) {
                        file['metadata'][key] = metadata[key];
                    }
                }
                return file
            };

            var inheritMetadata = function(o1, o2) {
                var commonMetadata = {};
                if (!Array.isArray(o2)) {
                    o2 = [o2]
                }
                for (var i = 0; i < o2.length; i++) {
                    var example = o2[i]['metadata'];
                    for (var key in example) {
                        if (i == 0)
                            commonMetadata[key] = example[key];
                        else {
                            if (!(commonMetadata[key] == example[key])) {
                                delete commonMetadata[key]
                            }
                        }
                    }
                }
                if (!Array.isArray(o1)) {
                    o1 = setMetadata(o1, commonMetadata)
                } else {
                    for (var i = 0; i < o1.length; i++) {
                        o1[i] = setMetadata(o1[i], commonMetadata)
                    }
                }
                return o1;
            };

        inputs:
        - id: chromosome
          label: Chromosome
          doc: Chromosome (1-24 or X,Y).
          type: string[]?
          inputBinding:
            prefix: --chromosome
            position: 10
            shellQuote: false
          sbg:altPrefix: -c
          sbg:category: Optional inputs
        - id: assoc_type
          label: Association Type
          doc: 'Type of association test: single, window or aggregate.'
          type:
            name: assoc_type
            type: enum
            symbols:
            - single
            - aggregate
            - window
        - id: assoc_files
          label: Association files
          doc: Association files to be combined.
          type: File[]
          sbg:fileTypes: RDATA
        - id: out_prefix
          label: Out Prefix
          doc: Output prefix.
          type: string?
        - id: memory_gb
          label: memory GB
          doc: 'Memory in GB per one job. Default value: 4GB.'
          type: float?
          sbg:category: Input options
          sbg:toolDefaultValue: '4'
        - id: cpu
          label: CPU
          doc: 'Number of CPUs for each tool job. Default value: 1.'
          type: int?
          sbg:category: Input Options
          sbg:toolDefaultValue: '1'
        - id: conditional_variant_file
          label: Conditional variant file
          doc: |-
            RData file with data frame of of conditional variants. Columns should include chromosome (or chr) and variant.id. The alternate allele dosage of these variants will be included as covariates in the analysis.
          type: File?
          sbg:category: General
          sbg:fileTypes: RData, RDATA

        outputs:
        - id: assoc_combined
          label: Assoc combined
          doc: Assoc combined.
          type: File?
          outputBinding:
            glob: |-
              ${
                  
                  //var input_files = [].concat(inputs.assoc_files);
                  //var first_filename = input_files[0].basename;
                  
                  //var chr = first_filename.split('_chr')[1].split('_')[0].split('.RData')[0];
                  
                  //return first_filename.split('chr')[0]+'chr'+chr+'.RData';
                  
                  return '*.RData'
              }
            outputEval: $(inheritMetadata(self, inputs.assoc_files))
          sbg:fileTypes: RDATA
        - id: configs
          label: Config files
          doc: Config files.
          type: File[]?
          outputBinding:
            glob: '*config*'
          sbg:fileTypes: CONFIG

        baseCommand: []
        arguments:
        - prefix: ''
          position: 100
          valueFrom: assoc_combine.config
          shellQuote: false
        - prefix: ''
          position: 5
          valueFrom: Rscript /usr/local/analysis_pipeline/R/assoc_combine.R
          shellQuote: false
        - prefix: ''
          position: 1
          valueFrom: |-
            ${
                var command = '';
                var i;
                for(i=0; i<inputs.assoc_files.length; i++)
                    command += "ln -s " + inputs.assoc_files[i].path + " " + inputs.assoc_files[i].path.split("/").pop() + " && "
                
                return command
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-c99b4268/h-7abe2ed7/h-df8924a2/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a9441836c8bc986fc185a4d0cacafb79eee2380bb33c56e1b49de6a4cabdbf4b8
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577360839
        sbg:id: h-c99b4268/h-7abe2ed7/h-df8924a2/0
        sbg:image_url:
        sbg:latestRevision: 7
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1616077298
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 7
        sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360839
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360864
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584373599
          sbg:revision: 2
          sbg:revisionNotes: GDS filename correction
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594133318
          sbg:revision: 3
          sbg:revisionNotes: Docker image update 2.8.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155372
          sbg:revision: 4
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603797891
          sbg:revision: 5
          sbg:revisionNotes: BDC import
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907124
          sbg:revision: 6
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077298
          sbg:revision: 7
          sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: assoc_combined
      - id: configs
      sbg:x: 1087
      sbg:y: 113
    - id: assoc_plots_r
      label: Association Plots
      in:
      - id: assoc_files
        valueFrom: '$(self ? [].concat(self) : self)'
        source:
        - assoc_combine_r/assoc_combined
        linkMerge: merge_flattened
      - id: assoc_type
        default: single
      - id: plots_prefix
        source: out_prefix
      - id: disable_thin
        source: disable_thin
      - id: known_hits_file
        source: known_hits_file
      - id: thin_npoints
        source: thin_npoints
      - id: thin_nbins
        source: thin_nbins
      - id: plot_mac_threshold
        source: plot_mac_threshold
      - id: truncate_pval_threshold
        source: truncate_pval_threshold
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: GENESIS Association Results Plotting
        doc: |-
          ### Description

          The UW-GAC Assoc_plots standalone app creates Manhattan and QQ plots from GENESIS association test results with additional filtering and stratification options available. This app is run automatically with default options set by the GENESIS Association Testing Workflows. Users can fine-tune the Manhattan and QQ plots by running this app separately, after one of the association testing workflows. The available options are:
           - Create QQ plots by chromosome.
           - Include a user-specified subset of the results in the plots.
           - Filter results to only those with MAC or MAF greater than a specified threshold.
           - Calculate genomic inflation lambda at various quantiles.
           - Specify the significance type and level.
           - Create QQ plots stratified by MAC or MAF.
           - Specify a maximum p-value to display on the plots.
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: ResourceRequirement
          coresMin: 1
          ramMin: 64000
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.10.0
        - class: InitialWorkDirRequirement
          listing:
          - entryname: assoc_file.config
            writable: false
            entry: |-
              ${
                  function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                  
                  var argument = [];
                  argument.push('out_prefix "assoc_single"');
                  var a_file = [].concat(inputs.assoc_files)[0];
                  var chr = find_chromosome(a_file.basename);
                  var path = a_file.path.split('chr'+chr);
                  var extension = path[1].split('.')[1];
                  
                   
                  if(inputs.plots_prefix){
                      argument.push('plots_prefix ' + inputs.plots_prefix);
                      argument.push('out_file_manh ' + inputs.plots_prefix + '_manh.png');
                      argument.push('out_file_qq ' + inputs.plots_prefix + '_qq.png');
                  }
                  else{
                      var data_prefix = path[0].split('/').pop();
                      argument.push('out_file_manh ' + data_prefix + 'manh.png');
                      argument.push('out_file_qq ' + data_prefix + 'qq.png');
                      argument.push('plots_prefix "plots"')
                  }
                  if(inputs.assoc_type){
                      argument.push('assoc_type ' + inputs.assoc_type)
                  }
                  
                  argument.push('assoc_file ' + '"' + path[0].split('/').pop() + 'chr ' +path[1] + '"')

                  if(inputs.chromosomes){
                      argument.push('chromosomes "' + inputs.chromosomes + '"')
                  }
                  else {
                      var chr_array = [];
                      var chrom_num;
                      var i;
                      for (var i = 0; i < inputs.assoc_files.length; i++) 
                      {
                          chrom_num = inputs.assoc_files[i].path.split("/").pop()
                          chrom_num = find_chromosome(chrom_num)
                          
                          chr_array.push(chrom_num)
                      }
                      
                      chr_array = chr_array.sort(function(a, b) { a.localeCompare(b, 'en', {numeric: true, ignorePunctuation: true})})
                      
                      var chrs = "";
                      for (var i = 0; i < chr_array.length; i++) 
                      {
                          chrs += chr_array[i] + " "
                      }
                      argument.push('chromosomes "' + chrs + '"')
                  }
                  if(inputs.disable_thin){
                      argument.push('thin FALSE')
                  }
                  if(inputs.thin_npoints)
                      argument.push('thin_npoints ' + inputs.thin_npoints)
                  if(inputs.thin_npoints)
                      argument.push('thin_nbins ' + inputs.thin_nbins)
                  if(inputs.known_hits_file)
                      argument.push('known_hits_file "' + inputs.known_hits_file.path + '"')
                  if(inputs.plot_mac_threshold)
                      argument.push('plot_mac_threshold ' + inputs.plot_mac_threshold)  
                  if(inputs.truncate_pval_threshold)
                      argument.push('truncate_pval_threshold ' + inputs.truncate_pval_threshold)    
                  if(inputs.plot_qq_by_chrom){
                      argument.push('plot_qq_by_chrom ' + inputs.plot_qq_by_chrom)
                  }
                  if(inputs.plot_include_file){
                      argument.push('plot_include_file ' + '"'+ inputs.plot_include_file.path + '"')
                  }
                  if(inputs.signif_type){
                      argument.push('signif_type ' + inputs.signif_type)
                  }    
                  if(inputs.signif_line_fixed){
                      argument.push('signif_line_fixed ' + inputs.signif_line_fixed)
                  } 
                  if(inputs.qq_mac_bins){
                      argument.push('qq_mac_bins ' + inputs.qq_mac_bins)
                  }
                  if(inputs.qq_maf_bins){
                      argument.push('qq_maf_bins ' + inputs.qq_maf_bins)
                  }    
                  if(inputs.lambda_quantiles){
                      argument.push('lambda_quantiles ' + inputs.lambda_quantiles)
                  }    
                  if(inputs.out_file_lambdas){
                      argument.push('out_file_lambdas ' + inputs.out_file_lambdas)
                  } 
                  if(inputs.plot_max_p){
                      argument.push('plot_max_p ' + inputs.plot_max_p)
                  } 
                  if(inputs.plot_maf_threshold){
                      argument.push('plot_maf_threshold ' + inputs.plot_maf_threshold)
                  }
                      
                      
                  argument.push('\n')
                  return argument.join('\n')
              }
        - class: InlineJavascriptRequirement

        inputs:
        - id: assoc_files
          label: Results from association testing
          doc: Rdata files. Results from association testing workflow.
          type: File[]
          sbg:category: Input Files
          sbg:fileTypes: RDATA
        - id: assoc_type
          label: Association Type
          doc: 'Type of association test: single, window or aggregate'
          type:
            name: assoc_type
            type: enum
            symbols:
            - single
            - window
            - aggregate
          sbg:category: Input options
        - id: chromosomes
          label: Chromosomes
          doc: |-
            List of chromosomes. If not provided, in case of multiple files, it will be automatically generated with assumtion that files are in format *chr*.RData
            Example: 1 2 3
          type: string?
          sbg:category: Input options
          sbg:toolDefaultValue: 1-23
        - id: plots_prefix
          label: Plots prefix
          doc: Prefix for output files.
          type: string?
          sbg:category: Input Options
          sbg:toolDefaultValue: plots
        - id: disable_thin
          label: Disable Thin
          doc: |-
            Logical for whether to thin points in the QQ and Manhattan plots. By default, points are thinned in dense regions to reduce plotting time. If this parameter is set to TRUE, all variant p-values will be included in the plots, and the plotting will be very long and memory intensive.
          type: boolean?
          sbg:category: Input Options
        - id: known_hits_file
          label: Known hits file
          doc: |-
            RData file with data.frame containing columns chr and pos. If provided, 1 Mb regions surrounding each variant listed will be omitted from the QQ and manhattan plots.
          type: File?
          sbg:category: Inputs
          sbg:fileTypes: RData, RDATA
        - id: thin_npoints
          label: Number of points in each bin after thinning
          doc: Number of points in each bin after thinning.
          type: int?
          sbg:category: General
          sbg:toolDefaultValue: '10000'
        - id: thin_nbins
          label: Thin N binsNumber of bins to use for thinning
          doc: Number of bins to use for thinning.
          type: int?
          sbg:category: General
          sbg:toolDefaultValue: '10'
        - id: plot_mac_threshold
          label: Plot MAC threshold
          doc: |-
            Minimum minor allele count for variants or Minimum cumulative minor allele count for aggregate units to include in plots (if different from threshold used to run tests; see `mac_threshold`).
          type: int?
        - id: truncate_pval_threshold
          label: Truncate pval threshold
          doc: Truncate pval threshold.
          type: float?
        - id: plot_qq_by_chrom
          label: Logical indicator for whether to generate QQ plots faceted by chromosome
          doc: Logical indicator for whether to generate QQ plots faceted by chromosome.
          type: boolean?
          sbg:toolDefaultValue: 'FALSE'
        - id: plot_include_file
          label: RData file with vector of ids to include
          doc: |-
            RData file with vector of ids to include. See `TopmedPipeline::assocFilterByFile` for format requirements.
          type: File?
          sbg:fileTypes: RDATA
        - id: signif_type
          label: |-
            Character string for how to calculate the significance threshold. Default is `fixed` for single variant analysis and `bonferroni` for other analysis types.
          doc: |-
            `fixed`, `bonferroni`, or `none`; character string for how to calculate the significance threshold. Default is `fixed` for single variant analysis and `bonferroni` for other analysis types.
          type:
          - 'null'
          - name: signif_type
            type: enum
            symbols:
            - fixed
            - bonferroni
            - none
        - id: signif_line_fixed
          label: P-value for the significance line. Only used if `signif_type = fixed`
          doc: P-value for the significance line. Only used if `signif_type = fixed`.
          type: float?
          sbg:toolDefaultValue: '5e-9'
        - id: qq_mac_bins
          label: |-
            Space separated string of integers (e.g., `"5 20 50"`). If set, generate a QQ plot binned by the specified MAC thresholds. 0 and Infinity will automatically be added.
          doc: |-
            Space separated string of integers (e.g., `"5 20 50"`). If set, generate a QQ plot binned by the specified MAC thresholds. 0 and Infinity will automatically be added.
          type: string?
        - id: qq_maf_bins
          label: |-
            Space separated string of minor allele frequencies (e.g., "0.01 0.05 0.1"). If set, generate a QQ plot binned by the specified minor allele frequencies. 0 and Infinity will automatically be added. Single variant tests only.
          doc: |-
            Space separated string of minor allele frequencies (e.g., "0.01 0.05 0.1"). If set, generate a QQ plot binned by the specified minor allele frequencies. 0 and Infinity will automatically be added. Single variant tests only.
          type: string?
        - id: lambda_quantiles
          label: |-
            Space separated string of quantiles at which to calculate lambda (e.g., “0.25 0.5 0.75”). If set, create a text file with lambda calculated at the specified quantiles stored in `out_file_lambdas`.
          doc: |-
            Space separated string of quantiles at which to calculate genomic inflation lambda (e.g., “0.25 0.5 0.75”). If set, create a text file with lambda calculated at the specified quantiles stored in `out_file_lambdas`.
          type: string?
        - id: out_file_lambdas
          label: File name of file to store lambda calculated at different quantiles
          doc: |-
            File name of file to store lambda calculated at different quantiles. The default is `lambda.txt`.
          type: string?
          sbg:toolDefaultValue: lambda.txt
        - id: plot_max_p
          label: |-
            Maximum p-value to plot in QQ and Manhattan plots. Expected QQ values are still calculated using the full set of p-values.
          doc: |-
            Maximum p-value to plot in QQ and Manhattan plots. Expected QQ values are still calculated using the full set of p-values.
          type: float?
          sbg:toolDefaultValue: '1'
        - id: plot_maf_threshold
          label: |-
            Minimum minor allele frequency for variants to include in plots. Ignored if `plot_mac_threshold` is specified. Single variant association tests only.
          doc: |-
            Minimum minor allele frequency for variants to include in plots. Ignored if `plot_mac_threshold` is specified. Single variant association tests only.
          type: float?

        outputs:
        - id: assoc_plots
          label: Assoc plots
          doc: QQ and Manhattan Plots generated by assoc_plots.R script.
          type: File[]?
          outputBinding:
            glob: '*.png'
          sbg:fileTypes: PNG
        - id: configs
          label: Config files
          doc: Config files.
          type: File[]?
          outputBinding:
            glob: '*config*'
          sbg:fileTypes: CONFIG
        - id: Lambdas
          label: File to store lambda calculated at different quantiles
          doc: File to store lambda calculated at different quantiles.
          type: File?
          outputBinding:
            glob: '*.txt'
          sbg:fileTypes: TXT

        baseCommand: []
        arguments:
        - prefix: ''
          position: 5
          valueFrom: assoc_file.config
          shellQuote: false
        - prefix: ''
          position: 3
          valueFrom: Rscript /usr/local/analysis_pipeline/R/assoc_plots.R
          shellQuote: false
        - prefix: ''
          position: 1
          valueFrom: |-
            ${
                var command = '';
                var i;
                for(i=0; i<inputs.assoc_files.length; i++)
                    command += "ln -s " + inputs.assoc_files[i].path + " " + inputs.assoc_files[i].path.split("/").pop() + " && "
                
                return command
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'\n}"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-a9525236/h-5d12ed1f/h-38de0709/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a5d8dc74db1119dc51408377c30dcdd5c785f05ca28302d3bd25ba23f291d750c
        sbg:contributors:
        - dajana_panovic
        - boris_majic
        sbg:createdBy: boris_majic
        sbg:createdOn: 1577360892
        sbg:id: h-a9525236/h-5d12ed1f/h-38de0709/0
        sbg:image_url:
        sbg:latestRevision: 10
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1617267791
        sbg:project: boris_majic/genesis-toolkit-demo
        sbg:projectName: GENESIS Toolkit - DEMO
        sbg:publisher: sbg
        sbg:revision: 10
        sbg:revisionNotes: Name update
        sbg:revisionsInfo:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360892
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: boris_majic
          sbg:modifiedOn: 1577360921
          sbg:revision: 1
          sbg:revisionNotes: Import from F4C
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584373539
          sbg:revision: 2
          sbg:revisionNotes: GDS filename correction
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1594133277
          sbg:revision: 3
          sbg:revisionNotes: Docker image update to 2.8.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1602155455
          sbg:revision: 4
          sbg:revisionNotes: Import from BDC 2.8.1 version
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1603797944
          sbg:revision: 5
          sbg:revisionNotes: BDC import
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907158
          sbg:revision: 6
          sbg:revisionNotes: CWLtool prep
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616077280
          sbg:revision: 7
          sbg:revisionNotes: Docker updated to uwgac/topmed-master:2.10.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1616144891
          sbg:revision: 8
          sbg:revisionNotes: Input descriptions updated
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1617264622
          sbg:revision: 9
          sbg:revisionNotes: Description updated
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1617267791
          sbg:revision: 10
          sbg:revisionNotes: Name update
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: assoc_plots
      - id: configs
      - id: Lambdas
      sbg:x: 1367
      sbg:y: 306
    - id: sbg_gds_renamer
      label: SBG GDS renamer
      in:
      - id: in_variants
        source: input_gds_files
      scatter:
      - in_variants
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: SBG GDS renamer
        doc: |-
          This tool renames GDS file in GENESIS pipelines if they contain suffixes after chromosome (chr##) in the filename.
          For example: If GDS file has name data_chr1_subset.gds the tool will rename GDS file to data_chr1.gds.
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.8.1
        - class: InlineJavascriptRequirement

        inputs:
        - id: in_variants
          label: GDS input
          doc: |-
            This tool removes suffix after 'chr##' in GDS filename. ## stands for chromosome name and can be (1-22,X,Y).
          type: File
          sbg:fileTypes: GDS

        outputs:
        - id: renamed_variants
          label: Renamed GDS
          doc: Renamed GDS file.
          type: File
          outputBinding:
            glob: "${\n    return '*'+inputs.in_variants.nameext\n}"
          sbg:fileTypes: GDS

        baseCommand:
        - cp
        arguments:
        - prefix: ''
          position: 0
          valueFrom: "${\n    if(inputs.in_variants){\n    return inputs.in_variants.path}\n\
            }"
          shellQuote: false
        - prefix: ''
          position: 0
          valueFrom: |-
            ${
                 function isNumeric(s) {
                    return !isNaN(s - parseFloat(s));
                }
                
                  function find_chromosome(file){
                     var chr_array = [];
                     var chrom_num = file.split("chr")[1];
                    
                     if(isNumeric(chrom_num.charAt(1)))
                     {
                        chr_array.push(chrom_num.substr(0,2))
                     }
                     else
                     {
                        chr_array.push(chrom_num.substr(0,1))
                     }
                     return chr_array.toString()
                }
                
                var chr = find_chromosome(inputs.in_variants.nameroot)
                var base = inputs.in_variants.nameroot.split('chr'+chr)[0]
                
                return base+'chr' + chr + inputs.in_variants.nameext
              
            }
          shellQuote: false
        - prefix: ''
          position: 100
          valueFrom: "${\n    return ' >> job.out.log'   \n}"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-c4401475/h-b0a1721f/h-69d0d5d4/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: ab721cbd39c33d272c5c42693fb02e02e43d95a3f421f40615cbf79ed023c35cc
        sbg:contributors:
        - dajana_panovic
        sbg:createdBy: dajana_panovic
        sbg:createdOn: 1584358811
        sbg:id: h-c4401475/h-b0a1721f/h-69d0d5d4/0
        sbg:image_url:
        sbg:latestRevision: 3
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1608907259
        sbg:project: sevenbridges/sbgtools-cwl1-0-demo
        sbg:projectName: SBGTools - CWL1.0 - Demo
        sbg:publisher: sbg
        sbg:revision: 3
        sbg:revisionNotes: CWLtool prep
        sbg:revisionsInfo:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584358811
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584358844
          sbg:revision: 1
          sbg:revisionNotes: Initial wrap
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1584359010
          sbg:revision: 2
          sbg:revisionNotes: Description updated
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907259
          sbg:revision: 3
          sbg:revisionNotes: CWLtool prep
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: renamed_variants
      sbg:x: -138.8903045654297
      sbg:y: -234.21176147460938
    - id: sbg_flatten_lists
      label: SBG FlattenLists
      in:
      - id: input_list
        valueFrom: |-
          ${     var out = [];     for (var i = 0; i<self.length; i++){         if (self[i])    out.push(self[i])     }     return out }
        source:
        - assoc_single_r/assoc_single
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: SBG FlattenLists
        doc: |-
          ###**Overview** 

          SBG FlattenLists is used to merge any combination of single file and list of file inputs into a single list of files. This is important because most tools and the CWL specification doesn't allow array of array types, and combinations of single file and array need to be converted into a single list for tools that can process a list of files.

          ###**Input** 

          Any combination of input nodes that are of types File or array of File, and any tool outputs that produce types File or array of File.

          ###**Output** 

          Single array of File list containing all Files from all inputs combined, provided there are no duplicate files in those lists.

          ###**Usage example** 

          Example of usage is combining the outputs of two tools, one which produces a single file, and the other that produces an array of files, so that the next tool, which takes in an array of files, can process them together.
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: ResourceRequirement
          coresMin: 1
          ramMin: 1000
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.8.1
        - class: InitialWorkDirRequirement
          listing:
          - $(inputs.input_list)
        - class: InlineJavascriptRequirement
          expressionLib:
          - |-
            var updateMetadata = function(file, key, value) {
                file['metadata'][key] = value;
                return file;
            };


            var setMetadata = function(file, metadata) {
                if (!('metadata' in file))
                    file['metadata'] = metadata;
                else {
                    for (var key in metadata) {
                        file['metadata'][key] = metadata[key];
                    }
                }
                return file
            };

            var inheritMetadata = function(o1, o2) {
                var commonMetadata = {};
                if (!Array.isArray(o2)) {
                    o2 = [o2]
                }
                for (var i = 0; i < o2.length; i++) {
                    var example = o2[i]['metadata'];
                    for (var key in example) {
                        if (i == 0)
                            commonMetadata[key] = example[key];
                        else {
                            if (!(commonMetadata[key] == example[key])) {
                                delete commonMetadata[key]
                            }
                        }
                    }
                }
                if (!Array.isArray(o1)) {
                    o1 = setMetadata(o1, commonMetadata)
                } else {
                    for (var i = 0; i < o1.length; i++) {
                        o1[i] = setMetadata(o1[i], commonMetadata)
                    }
                }
                return o1;
            };

            var toArray = function(file) {
                return [].concat(file);
            };

            var groupBy = function(files, key) {
                var groupedFiles = [];
                var tempDict = {};
                for (var i = 0; i < files.length; i++) {
                    var value = files[i]['metadata'][key];
                    if (value in tempDict)
                        tempDict[value].push(files[i]);
                    else tempDict[value] = [files[i]];
                }
                for (var key in tempDict) {
                    groupedFiles.push(tempDict[key]);
                }
                return groupedFiles;
            };

            var orderBy = function(files, key, order) {
                var compareFunction = function(a, b) {
                    if (a['metadata'][key].constructor === Number) {
                        return a['metadata'][key] - b['metadata'][key];
                    } else {
                        var nameA = a['metadata'][key].toUpperCase();
                        var nameB = b['metadata'][key].toUpperCase();
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                        return 0;
                    }
                };

                files = files.sort(compareFunction);
                if (order == undefined || order == "asc")
                    return files;
                else
                    return files.reverse();
            };

        inputs:
        - id: input_list
          label: Input list of files and lists
          doc: |-
            List of inputs, can be any combination of lists of files and single files, it will be combined into a single list of files at the output.
          type: File[]?
          sbg:category: File inputs

        outputs:
        - id: output_list
          label: Output list of files
          doc: Single list of files that combines all files from all inputs.
          type: File[]?
          outputBinding:
            outputEval: |-
              ${
                  function flatten(files) {
                      var a = [];
                      for (var i = 0; i < files.length; i++) {
                          if (files[i]) {
                              if (files[i].constructor == Array) a = a.concat(flatten(files[i]))
                              else a = a.concat(files[i])
                          }
                      }
                      return a
                  }

                  {
                      if (inputs.input_list) {
                          var arr = [].concat(inputs.input_list);
                          var return_array = [];
                          return_array = flatten(arr)
                          return return_array
                      }
                  }
              }

        baseCommand:
        - echo
        arguments:
        - position: 0
          valueFrom: '"Output'
          shellQuote: false
        - position: 1
          valueFrom: is
          shellQuote: false
        - position: 2
          valueFrom: now
          shellQuote: false
        - position: 3
          valueFrom: a
          shellQuote: false
        - position: 4
          valueFrom: single
          shellQuote: false
        - position: 5
          valueFrom: list"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-c3d007fe/h-f8cf5a79/h-31ac1af0/0
        sbg:appVersion:
        - v1.1
        sbg:categories:
        - Other
        sbg:cmdPreview: echo "Output is now a single list"
        sbg:content_hash: a8ab04a2a11a3f02f5cb29025dbeebbe3bb71cc8f1eb7caafb6e2140373cc62f3
        sbg:contributors:
        - dajana_panovic
        - nens
        sbg:createdBy: nens
        sbg:createdOn: 1566552375
        sbg:id: h-c3d007fe/h-f8cf5a79/h-31ac1af0/0
        sbg:image_url:
        sbg:latestRevision: 3
        sbg:license: Apache License 2.0
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1608907303
        sbg:project: sevenbridges/sbgtools-cwl1-0-demo
        sbg:projectName: SBGTools - CWL1.0 - Demo
        sbg:publisher: sbg
        sbg:revision: 3
        sbg:revisionNotes: CWLtool prep
        sbg:revisionsInfo:
        - sbg:modifiedBy: nens
          sbg:modifiedOn: 1566552375
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: nens
          sbg:modifiedOn: 1566552393
          sbg:revision: 1
          sbg:revisionNotes: v2-dev
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1588599015
          sbg:revision: 2
          sbg:revisionNotes: Updated to CWL1.0
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907303
          sbg:revision: 3
          sbg:revisionNotes: CWLtool prep
        sbg:sbgMaintained: false
        sbg:toolAuthor: Seven Bridges
        sbg:toolkit: SBGTools
        sbg:toolkitVersion: '1.0'
        sbg:validationErrors: []
      out:
      - id: output_list
      sbg:x: 684.666015625
      sbg:y: 128.0019073486328
    - id: sbg_prepare_segments_1
      label: SBG Prepare Segments
      in:
      - id: input_gds_files
        source:
        - sbg_gds_renamer/renamed_variants
      - id: segments_file
        source: define_segments_r/define_segments_output
      - id: variant_include_files
        source:
        - variant_include_files
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: SBG Prepare Segments
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: ShellCommandRequirement
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.8.1
        - class: InlineJavascriptRequirement

        inputs:
        - id: input_gds_files
          label: GDS files
          doc: GDS files.
          type: File[]
          sbg:category: Inputs
          sbg:fileTypes: GDS
        - id: segments_file
          label: Segments file
          doc: Segments file.
          type: File
          sbg:category: Inputs
          sbg:fileTypes: TXT
        - id: aggregate_files
          label: Aggregate files
          doc: Aggregate files.
          type: File[]?
          sbg:category: Inputs
          sbg:fileTypes: RDATA
        - id: variant_include_files
          label: Variant Include Files
          doc: RData file containing ids of variants to be included.
          type: File[]?
          sbg:category: Inputs
          sbg:fileTypes: RData

        outputs:
        - id: gds_output
          label: GDS files
          doc: GDS files.
          type: File[]?
          outputBinding:
            glob: '*.txt'
            outputEval: |-
              ${
                   function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                  
                  
                  
                  function pair_chromosome_gds(file_array){
                      var gdss = {};
                      for(var i=0; i<file_array.length; i++){
                          gdss[find_chromosome(file_array[i].path)] = file_array[i]
                      }
                      return gdss
                  }

                  var input_gdss = pair_chromosome_gds(inputs.input_gds_files)
                  var output_gdss = [];
                  var segments = self[0].contents.split('\n');
                  var chr;
                  
                  segments = segments.slice(1)
                  for(var i=0;i<segments.length;i++){
                      chr = segments[i].split('\t')[0]
                      if(chr in input_gdss){
                          output_gdss.push(input_gdss[chr])
                      }
                  }
                  return output_gdss
              }
            loadContents: true
          sbg:fileTypes: GDS
        - id: segments
          label: Segments
          doc: Segments.
          type: int[]?
          outputBinding:
            glob: '*.txt'
            outputEval: |-
              ${
                   function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                  
                  function pair_chromosome_gds(file_array){
                      var gdss = {};
                      for(var i=0; i<file_array.length; i++){
                          gdss[find_chromosome(file_array[i].path)] = file_array[i]
                      }
                      return gdss
                  }
                  
                  var input_gdss = pair_chromosome_gds(inputs.input_gds_files)
                  var output_segments = []
                  var segments = self[0].contents.split('\n');
                  segments = segments.slice(1)
                  var chr;
                  
                  for(var i=0;i<segments.length;i++){
                      chr = segments[i].split('\t')[0]
                      if(chr in input_gdss){
                          output_segments.push(i+1)
                      }
                  }
                  return output_segments
                  
              }
            loadContents: true
        - id: aggregate_output
          label: Aggregate output
          doc: Aggregate output.
          type:
          - 'null'
          - type: array
            items:
            - 'null'
            - File
          outputBinding:
            glob: '*.txt'
            outputEval: |-
              ${
                   function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                  
                  function pair_chromosome_gds(file_array){
                      var gdss = {};
                      for(var i=0; i<file_array.length; i++){
                          gdss[find_chromosome(file_array[i].path)] = file_array[i]
                      }
                      return gdss
                  }
                  function pair_chromosome_gds_special(file_array, agg_file){
                      var gdss = {};
                      for(var i=0; i<file_array.length; i++){
                          gdss[find_chromosome(file_array[i].path)] = agg_file
                      }
                      return gdss
                  }
                  var input_gdss = pair_chromosome_gds(inputs.input_gds_files)
                  var segments = self[0].contents.split('\n');
                  segments = segments.slice(1)
                  var chr;
                  
                  if(inputs.aggregate_files){
                      if (inputs.aggregate_files[0] != null){
                          if (inputs.aggregate_files[0].basename.includes('chr'))
                              var input_aggregate_files = pair_chromosome_gds(inputs.aggregate_files);
                          else
                              var input_aggregate_files = pair_chromosome_gds_special(inputs.input_gds_files, inputs.aggregate_files[0].path);
                          var output_aggregate_files = []
                          for(var i=0;i<segments.length;i++){
                              chr = segments[i].split('\t')[0]
                              if(chr in input_aggregate_files){
                                  output_aggregate_files.push(input_aggregate_files[chr])
                              }
                              else if(chr in input_gdss){
                                  output_aggregate_files.push(null)
                              }
                          }
                          return output_aggregate_files
                      }
                  }
                  else{
                      var null_outputs = []
                      for(var i=0; i<segments.length; i++){
                          chr = segments[i].split('\t')[0]
                          if(chr in input_gdss){
                              null_outputs.push(null)
                          }
                      }
                      return null_outputs
                  }
              }
            loadContents: true
        - id: variant_include_output
          label: Variant Include Output
          doc: Variant Include Output
          type:
          - 'null'
          - type: array
            items:
            - 'null'
            - File
          outputBinding:
            glob: '*.txt'
            outputEval: |-
              ${
                   function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("chr")[1];
                      
                      if(isNumeric(chrom_num.charAt(1)))
                      {
                          chr_array.push(chrom_num.substr(0,2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(0,1))
                      }
                      return chr_array.toString()
                  }
                  
                  function pair_chromosome_gds(file_array){
                      var gdss = {};
                      for(var i=0; i<file_array.length; i++){
                          gdss[find_chromosome(file_array[i].path)] = file_array[i]
                      }
                      return gdss
                  }
                  var input_gdss = pair_chromosome_gds(inputs.input_gds_files)
                  var segments = self[0].contents.split('\n');
                  segments = segments.slice(1)
                  var chr;
                  
                  if(inputs.variant_include_files){
                      if (inputs.variant_include_files[0] != null){
                          var input_variant_files = pair_chromosome_gds(inputs.variant_include_files)
                          var output_variant_files = []
                          for(var i=0;i<segments.length;i++){
                              chr = segments[i].split('\t')[0]
                              if(chr in input_variant_files){
                                  output_variant_files.push(input_variant_files[chr])
                              }
                              else if(chr in input_gdss){
                                  output_variant_files.push(null)
                              }
                          }
                          return output_variant_files
                      }
                  }
                  else{
                      var null_outputs = [];
                      for(var i=0; i<segments.length; i++){
                          chr = segments[i].split('\t')[0]
                          if(chr in input_gdss){
                              null_outputs.push(null)
                          }
                      }
                      return null_outputs
                  }
              }
            loadContents: true

        baseCommand: []
        arguments:
        - prefix: ''
          position: 0
          valueFrom: "${\n    return \"cp \" + inputs.segments_file.path + \" .\"\n\
            }"
          shellQuote: false

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-eeafaff0/h-028cc27d/h-9f188156/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: af5431cfdc789d53445974b82b534a1ba1c6df2ac79d7b39af88dce65def8cb34
        sbg:contributors:
        - dajana_panovic
        sbg:createdBy: dajana_panovic
        sbg:createdOn: 1608907510
        sbg:id: h-eeafaff0/h-028cc27d/h-9f188156/0
        sbg:image_url:
        sbg:latestRevision: 1
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1608907520
        sbg:project: sevenbridges/sbgtools-cwl1-0-demo
        sbg:projectName: SBGTools - CWL1.0 - Demo
        sbg:publisher: sbg
        sbg:revision: 1
        sbg:revisionNotes: CWLtool prep
        sbg:revisionsInfo:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907510
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907520
          sbg:revision: 1
          sbg:revisionNotes: CWLtool prep
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: gds_output
      - id: segments
      - id: aggregate_output
      - id: variant_include_output
      sbg:x: 76.38661193847656
      sbg:y: -183.02523803710938
    - id: sbg_group_segments_1
      label: SBG Group Segments
      in:
      - id: assoc_files
        source:
        - sbg_flatten_lists/output_list
      run:
        cwlVersion: v1.1
        class: CommandLineTool
        label: SBG Group Segments
        $namespaces:
          sbg: https://sevenbridges.com

        requirements:
        - class: DockerRequirement
          dockerPull: uwgac/topmed-master:2.8.1
        - class: InlineJavascriptRequirement

        inputs:
        - id: assoc_files
          label: Assoc files
          doc: Assoc files.
          type: File[]
          sbg:category: Inputs
          sbg:fileTypes: RDATA

        outputs:
        - id: grouped_assoc_files
          type:
          - 'null'
          - type: array
            items:
            - type: array
              items:
              - File
              - 'null'
            - 'null'
          outputBinding:
            outputEval: |-
              ${
                  function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("/").pop();
                      chrom_num = chrom_num.substr(0,chrom_num.lastIndexOf(".")).split('_').slice(0,-1).join('_')
                      if(isNumeric(chrom_num.charAt(chrom_num.length-2)))
                      {
                          chr_array.push(chrom_num.substr(chrom_num.length - 2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(chrom_num.length - 1))
                      }
                      return chr_array.toString()
                  }
                  
                  var assoc_files_dict = {};
                  var grouped_assoc_files = [];
                  var chr;
                  for(var i=0; i<inputs.assoc_files.length; i++){
                      chr = find_chromosome(inputs.assoc_files[i].path)
                      if(chr in assoc_files_dict){
                          assoc_files_dict[chr].push(inputs.assoc_files[i])
                      }
                      else{
                          assoc_files_dict[chr] = [inputs.assoc_files[i]]
                      }
                  }
                  for(var key in assoc_files_dict){
                      grouped_assoc_files.push(assoc_files_dict[key])
                  }
                  return grouped_assoc_files
                  
              }
        - id: chromosome
          label: Chromosomes
          doc: Chromosomes.
          type: string[]?
          outputBinding:
            outputEval: |-
              ${
                  function isNumeric(s) {
                      return !isNaN(s - parseFloat(s));
                  }
                  function find_chromosome(file){
                      var chr_array = [];
                      var chrom_num = file.split("/").pop();
                      chrom_num = chrom_num.substr(0,chrom_num.lastIndexOf(".")).split('_').slice(0,-1).join('_')
                      if(isNumeric(chrom_num.charAt(chrom_num.length-2)))
                      {
                          chr_array.push(chrom_num.substr(chrom_num.length - 2))
                      }
                      else
                      {
                          chr_array.push(chrom_num.substr(chrom_num.length - 1))
                      }
                      return chr_array.toString()
                  }
                  
                  var assoc_files_dict = {};
                  var output_chromosomes = [];
                  var chr;
                  for(var i=0; i<inputs.assoc_files.length; i++){
                      chr = find_chromosome(inputs.assoc_files[i].path)
                      if(chr in assoc_files_dict){
                          assoc_files_dict[chr].push(inputs.assoc_files[i])
                      }
                      else{
                          assoc_files_dict[chr] = [inputs.assoc_files[i]]
                      }
                  }
                  for(var key in assoc_files_dict){
                      output_chromosomes.push(key)
                  }
                  return output_chromosomes
                  
              }

        baseCommand:
        - echo
        - '"Grouping"'

        hints:
        - class: sbg:SaveLogs
          value: job.out.log
        id: h-5fe5d300/h-01c848c3/h-61bfc9b0/0
        sbg:appVersion:
        - v1.1
        sbg:content_hash: a515be0f5124c62e65c743e3ca9940a2d4d90f71217b08949ce69537195ad562c
        sbg:contributors:
        - dajana_panovic
        sbg:createdBy: dajana_panovic
        sbg:createdOn: 1608907549
        sbg:id: h-5fe5d300/h-01c848c3/h-61bfc9b0/0
        sbg:image_url:
        sbg:latestRevision: 1
        sbg:modifiedBy: dajana_panovic
        sbg:modifiedOn: 1608907559
        sbg:project: sevenbridges/sbgtools-cwl1-0-demo
        sbg:projectName: SBGTools - CWL1.0 - Demo
        sbg:publisher: sbg
        sbg:revision: 1
        sbg:revisionNotes: CWLtool prep
        sbg:revisionsInfo:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907549
          sbg:revision: 0
          sbg:revisionNotes:
        - sbg:modifiedBy: dajana_panovic
          sbg:modifiedOn: 1608907559
          sbg:revision: 1
          sbg:revisionNotes: CWLtool prep
        sbg:sbgMaintained: false
        sbg:validationErrors: []
      out:
      - id: grouped_assoc_files
      - id: chromosome
      sbg:x: 855.9915771484375
      sbg:y: 119.47896575927734

    hints:
    - class: sbg:maxNumberOfParallelInstances
      value: '8'
    id: dave/build-demo-gwas-workflows/single-variant-association-testing/0
    sbg:appVersion:
    - v1.1
    sbg:categories:
    - GWAS
    - CWL1.0
    - Genomics
    sbg:content_hash: a779487b2aeb97311196b11a6c99fa6f26bfb80e981ac1113e328ba9b4706c6f9
    sbg:contributors:
    - dave
    sbg:copyOf: admin/sbg-public-data/single-variant-association-testing/25
    sbg:createdBy: dave
    sbg:createdOn: 1621269268
    sbg:expand_workflow: false
    sbg:id: dave/build-demo-gwas-workflows/single-variant-association-testing/0
    sbg:image_url: |-
      https://platform.sb.biodatacatalyst.nhlbi.nih.gov/ns/brood/images/dave/build-demo-gwas-workflows/single-variant-association-testing/0.png
    sbg:latestRevision: 0
    sbg:license: MIT
    sbg:links:
    - id: https://github.com/UW-GAC/analysis_pipeline
      label: Source Code, Download
    - id: |-
        https://academic.oup.com/bioinformatics/advance-article-abstract/doi/10.1093/bioinformatics/btz567/5536872?redirectedFrom=fulltext
      label: Publication
    - id: |-
        https://www.bioconductor.org/packages/release/bioc/vignettes/GENESIS/inst/doc/assoc_test.html
      label: Home Page
    - id: https://bioconductor.org/packages/devel/bioc/manuals/GENESIS/man/GENESIS.pdf
      label: Documentation
    sbg:modifiedBy: dave
    sbg:modifiedOn: 1621269268
    sbg:project: dave/build-demo-gwas-workflows
    sbg:projectName: 'BUILD: Demo GWAS Workflows'
    sbg:publisher: sbg
    sbg:revision: 0
    sbg:revisionNotes: Copy of admin/sbg-public-data/single-variant-association-testing/25
    sbg:revisionsInfo:
    - sbg:modifiedBy: dave
      sbg:modifiedOn: 1621269268
      sbg:revision: 0
      sbg:revisionNotes: Copy of admin/sbg-public-data/single-variant-association-testing/25
    sbg:sbgMaintained: false
    sbg:toolAuthor: TOPMed DCC
    sbg:validationErrors: []
  out:
  - id: assoc_combined
  - id: assoc_plots
  sbg:x: 551.2303466796875
  sbg:y: -87
id: |-
  https://api.sb.biodatacatalyst.nhlbi.nih.gov/v2/apps/dave/build-demo-gwas-workflows/null-model-sva/1/raw/
sbg:appVersion:
- v1.2
- v1.1
sbg:content_hash: afa7bd3fed79e1725d9eac4d2ac4c0967aa367c8274ad62c681807d7ec820e545
sbg:contributors:
- dave
sbg:createdBy: dave
sbg:createdOn: 1621269323
sbg:id: dave/build-demo-gwas-workflows/null-model-sva/1
sbg:image_url: |-
  https://platform.sb.biodatacatalyst.nhlbi.nih.gov/ns/brood/images/dave/build-demo-gwas-workflows/null-model-sva/1.png
sbg:latestRevision: 1
sbg:modifiedBy: dave
sbg:modifiedOn: 1621269421
sbg:project: dave/build-demo-gwas-workflows
sbg:projectName: 'BUILD: Demo GWAS Workflows'
sbg:publisher: sbg
sbg:revision: 1
sbg:revisionNotes: ''
sbg:revisionsInfo:
- sbg:modifiedBy: dave
  sbg:modifiedOn: 1621269323
  sbg:revision: 0
  sbg:revisionNotes:
- sbg:modifiedBy: dave
  sbg:modifiedOn: 1621269421
  sbg:revision: 1
  sbg:revisionNotes: ''
sbg:sbgMaintained: false
sbg:validationErrors:
- |-
  Missing one or more mandatory run inputs in step inputs: ['#null_model.outcome', '#null_model.family']
